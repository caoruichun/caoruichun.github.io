<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql从入门到跑路</title>
      <link href="/2020/04/15/mysql/mysql_1/"/>
      <url>/2020/04/15/mysql/mysql_1/</url>
      
        <content type="html"><![CDATA[<h2 id="window-中-服务的启动和停止"><a href="#window-中-服务的启动和停止" class="headerlink" title="window 中 服务的启动和停止"></a>window 中 服务的启动和停止</h2><pre><code>net start 服务名（mysql）net stop 服务名（mysql）</code></pre><h2 id="mysql-服务登录和退出"><a href="#mysql-服务登录和退出" class="headerlink" title="mysql 服务登录和退出"></a>mysql 服务登录和退出</h2><pre><code>1.登录 mysql [-h主机名 -p端口号] -u用户名 -p密码2.退出exit或者ctrl+c3.数据库内查看数据库版本select version();</code></pre><h3 id="mysql-库的常用命令"><a href="#mysql-库的常用命令" class="headerlink" title="mysql 库的常用命令"></a>mysql 库的常用命令</h3><pre><code>1.显示所有库  show databases;2.选择库  use 库名;3.显示表  show tables;4.显示指定库内的表   show tables from 库名;5.查看当前在那个库   select database();6.查看表结构  desc 表名;7.注释 # --</code></pre><h3 id="mysql-创建表"><a href="#mysql-创建表" class="headerlink" title="mysql 创建表"></a>mysql 创建表</h3><pre><code>create table 表名(id int,name varchar(20));  </code></pre><h2 id="mysql-查询SELECT"><a href="#mysql-查询SELECT" class="headerlink" title="mysql 查询SELECT"></a>mysql 查询SELECT</h2><pre><code>1.单字段查询SELECT    `username` FROM upms_user;2.多字段查询SELECT    `username`,`phone` FROM upms_user;3.查询所有字段SELECT    * FROM upms_user;4. SELECTSELECT 100;SELECT &apos;100&apos;;SELECT 100%2;SELECT VERSION();5.起别名 5.1 方式一，asSELECT 100%2 as result;5.2 方式二SELECT 100%2 result;5.去除重复 distinctSELECT DISTINCT `department_id` FROM `employees`;6.+ 加号的作用 在mysql中只是运算符，不能做拼接7.数据多个字段拼接使用函数 CONCATSELECT CONCAT(str1,str2,...)8.判断是否为null SELECT department_id,IFNULL(department_id,1) AS asdepartment  from employees;</code></pre><h2 id="mysql-SELECT条件查询-where"><a href="#mysql-SELECT条件查询-where" class="headerlink" title="mysql SELECT条件查询 where"></a>mysql SELECT条件查询 where</h2><blockquote><p>select 查询列表 from 表名 where 筛选条件</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>一. 按条件表达式筛选</p><blockquote><p>条件运算符：&gt; &lt; = != &gt;= &lt;= &lt;&gt;</p></blockquote><p>二. 按逻辑表达式</p><blockquote><p>逻辑运算符： and or not  </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 按条件表达式筛选</span><br><span class="line">-- 案例一 查询工资&gt; 12000的员工信息</span><br><span class="line">SELECT * FROM employees WHERE salary&gt;12000;</span><br><span class="line">-- 案例二 查询部门编号不等于90的员工名和部门编号</span><br><span class="line">SELECT last_name ,department_id FROM employees WHERE department_id&lt;&gt;90;</span><br><span class="line">-- 案例三 查询工资在10000到20000之间的员工名，工资，以及奖金</span><br><span class="line">SELECT last_name,salary,commission_pct FROM employees WHERE salary&gt;=10000 AND salary&lt;=20000;</span><br><span class="line">-- 案例四 查询部门编号不在90到110之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT * FROM employees WHERE department_id&lt;90 OR department_id&gt;110 OR salary&gt;15000;</span><br></pre></td></tr></table></figure></div><p>三. 模糊查询</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">like</td><td align="left">和通配符（%:任意多个 _:任意单个字符） 配合使用</td></tr><tr><td align="left">between and</td><td align="left">含义：字段包含在一个区间 <br>特点：包含领界值</td></tr><tr><td align="left">in</td><td align="left">含义：判断某字段的值是否属于in 列表中的某一项 <br> 特点：in列表中的每一项类型必须相同</td></tr><tr><td align="left">is null</td><td align="left">含义：判断某项字符内容为null的，不能判断null</td></tr><tr><td align="left">&lt;=&gt;</td><td align="left">&lt;=&gt; 安全等于 等价于 = 可以判断null</td></tr></tbody></table><h3 id="1-模糊查询like"><a href="#1-模糊查询like" class="headerlink" title="1.模糊查询like"></a>1.模糊查询like</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询员工名中包含字符a 的员工信息</span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE &apos;%a%&apos;;</span><br><span class="line">-- 2.查询员工名第三个字符中包含字符n第5个包含l的员工信息</span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE &apos;__n_l%&apos;;</span><br><span class="line">-- 3.查询员工名中第二个字符为_的员工名 （因为_是通配符需要转义）</span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE &apos;_\_%&apos;;</span><br><span class="line">-- 3.查询员工名中第二个字符为_的员工名（指定$为转义字符 ESCAPE &apos;$&apos;）</span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE &apos;_$_%&apos; ESCAPE &apos;$&apos;;</span><br></pre></td></tr></table></figure></div><h3 id="2-模糊查询between-and"><a href="#2-模糊查询between-and" class="headerlink" title="2.模糊查询between and"></a>2.模糊查询between and</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 4 查询部门编号在100到120之间</span><br><span class="line">SELECT * FROM employees WHERE employee_id BETWEEN 100 AND 120;</span><br></pre></td></tr></table></figure></div><h3 id="3-模糊查询in"><a href="#3-模糊查询in" class="headerlink" title="3.模糊查询in"></a>3.模糊查询in</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 5 员工的工种编号是IT_PROG,AD_VP,AD_PRES中的一个员工名和工种编号</span><br><span class="line">SELECT last_name,job_id FROM employees WHERE job_id = &apos;IT_PROG&apos; OR job_id = &apos;AD_VP&apos; OR job_id = &apos;AD_PRES&apos;;</span><br><span class="line">SELECT last_name,job_id FROM employees WHERE job_id IN(&apos;IT_PROG&apos;,&apos;AD_VP&apos;,&apos;AD_PRES&apos;);</span><br></pre></td></tr></table></figure></div><h3 id="4-模糊查询is-null"><a href="#4-模糊查询is-null" class="headerlink" title="4.模糊查询is null"></a>4.模糊查询is null</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 6 查询没有奖金的员工姓名和奖金率</span><br><span class="line">SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NULL;</span><br><span class="line">-- &lt;=&gt; 安全等于等价于 = 可以判断null</span><br><span class="line">SELECT last_name,commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;</span><br><span class="line">-- 7 查询有奖金的员工姓名和奖金率</span><br><span class="line">SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure></div><h3 id="5-排序查询order-by"><a href="#5-排序查询order-by" class="headerlink" title="5.排序查询order by"></a>5.排序查询order by</h3><blockquote><p>SELECT * FROM <code>employees</code> WHERE   ORDER BY [asc(默认可以不写)|desc]<br>order by 子句一般放在查询语句的最后面，除limit子句</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> # 查询员工信息，要求工资从高到底排序</span><br><span class="line">SELECT * FROM `employees` ORDER BY salary DESC;</span><br><span class="line">SELECT * FROM `employees` ORDER BY salary;</span><br><span class="line"># 案例2 查询部门编号》=90的员工信息，按入职日期的先后排序</span><br><span class="line">SELECT * FROM `employees` WHERE `department_id` &gt;=90 ORDER BY `hiredate` ASC;</span><br><span class="line"># 案例3 按年薪的高低显示员工的信息和年薪【按表达式排序】</span><br><span class="line">SELECT *, salary*12*(1+IFNULL(`commission_pct`,0)) 年薪 FROM `employees` ORDER BY `salary`*12*(1+IFNULL(`commission_pct`,0)) DESC;</span><br><span class="line"># 案例4 按年薪的高低显示员工的信息和年薪【按别名排序】</span><br><span class="line">SELECT *, salary*12*(1+IFNULL(`commission_pct`,0)) 年薪 FROM `employees` ORDER BY 年薪 DESC;</span><br><span class="line"># 案例5 按姓名长度显示员工的信息和工资【按函数排序】</span><br><span class="line">SELECT LENGTH(last_name) AS 字节长度 , last_name,salary FROM `employees` ORDER BY LENGTH(last_name) DESC;</span><br><span class="line"># 案例6 查询员工信息，要求先按工资s升序排序，再按员工编号降序排序【按多个字段排序】</span><br><span class="line">SELECT * FROM `employees` ORDER BY salary ASC,`employee_id` DESC;</span><br></pre></td></tr></table></figure></div><h1 id="mysql常见函数"><a href="#mysql常见函数" class="headerlink" title="mysql常见函数"></a>mysql常见函数</h1><blockquote><p>功能：类似于 封装的方法。将一组逻辑封装在方法体中，对外暴露方法名。<br>作用：提高代码的重用性<br>调用：select 函数名(实参列表) [form 表]<br>特点：1.叫什么（函数名） 2.干什么（函数功能）<br>分类：1.单行函数 如：CONCAT(str1,str2,…),length,IFNULL(expr1,expr2)等<br>       1.1 字符函数 1.2 数学函数 1.3 日期函数 1.4 其他函数 1.5 流程控制函数<br>2.分组函数 功能：做统计使用，又称为统计函数，聚合函数，组函数<br>  分类  2.1 sum 求和 2.2avg 平均值 2.3 max最大值 2.4 min最小值 2.5 count 计算个数</p></blockquote><h1 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h1><h2 id="一-字符函数"><a href="#一-字符函数" class="headerlink" title="一.字符函数"></a>一.字符函数</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><blockquote><p>获取长度  utf8 中文占3个字符 GBK中文占2个字符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select LENGTH(&apos;john&apos;);</span><br><span class="line">SELECT LENGTH(&apos;中国&apos;);</span><br><span class="line">SHOW VARIABLESLIKE &apos;%char%&apos;;</span><br></pre></td></tr></table></figure></div><h3 id="CONCAT-str1-str2-…"><a href="#CONCAT-str1-str2-…" class="headerlink" title="CONCAT(str1,str2,…)"></a>CONCAT(str1,str2,…)</h3><blockquote><p>拼接字符串</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CONCAT(last_name,&apos;-&apos;,first_name) 姓名 from employees;</span><br></pre></td></tr></table></figure></div><h3 id="UPPER-str-大写-LOWER-str-小写"><a href="#UPPER-str-大写-LOWER-str-小写" class="headerlink" title="UPPER(str) 大写,LOWER(str) 小写"></a>UPPER(str) 大写,LOWER(str) 小写</h3><blockquote><p>大小写转换</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOWER(&apos;JOHN&apos;);</span><br><span class="line">SELECT UPPER(&apos;john&apos;);</span><br></pre></td></tr></table></figure></div><h3 id="SUBSTR-str-FROM-pos-FOR-len-，SUBSTRING-str-FROM-pos-FOR-len"><a href="#SUBSTR-str-FROM-pos-FOR-len-，SUBSTRING-str-FROM-pos-FOR-len" class="headerlink" title="SUBSTR(str FROM pos FOR len)，SUBSTRING(str FROM pos FOR len)"></a>SUBSTR(str FROM pos FOR len)，SUBSTRING(str FROM pos FOR len)</h3><blockquote><p> 截取字符长度 注意索引从1开始 </p></blockquote><blockquote><p>截取从指定索引出后面的所有字符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTR(&apos;截取字符长度注意索引&apos;,1)  as &apos;截取&apos;;</span><br></pre></td></tr></table></figure></div><blockquote><p>截取从指定索引处指定字符长度的字符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTR(&apos;截取字符长度注意索引&apos;,1,5)  as &apos;截取&apos;;</span><br></pre></td></tr></table></figure></div><h3 id="INSTR-str-substr"><a href="#INSTR-str-substr" class="headerlink" title="INSTR(str,substr)"></a>INSTR(str,substr)</h3><blockquote><p>返回子串第一次出现的所在索引 注意：如果找不到返回0 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&apos;截取字符长度注意休息&apos;,&apos;休息&apos;) as out_put;</span><br></pre></td></tr></table></figure></div><h3 id="TRIM-remstr-FROM-str"><a href="#TRIM-remstr-FROM-str" class="headerlink" title="TRIM([remstr FROM] str)"></a>TRIM([remstr FROM] str)</h3><blockquote><p>去空格 </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(TRIM(&apos;   张三  &apos;)) as out_put;</span><br></pre></td></tr></table></figure></div><blockquote><p>去除前后的指定字符</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(TRIM(&apos;a&apos; from &apos;aaa张三aaa&apos;)) as out_put;</span><br></pre></td></tr></table></figure></div><h3 id="lpad"><a href="#lpad" class="headerlink" title="lpad"></a>lpad</h3><blockquote><p>用指定的字符实现左填充指定的长度</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&apos;张三&apos;,10,&apos;$&apos;);</span><br></pre></td></tr></table></figure></div><h3 id="rpad"><a href="#rpad" class="headerlink" title="rpad"></a>rpad</h3><blockquote><p>用指定的字符实现右填充指定的长度</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RPAD(&apos;张三&apos;,10,&apos;$&apos;);</span><br></pre></td></tr></table></figure></div><h3 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h3><blockquote><p>替换</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&apos;张三爱上李四&apos;,&apos;李四&apos;,&apos;王五&apos;) AS out_put;</span><br></pre></td></tr></table></figure></div><h2 id="二-数学函数"><a href="#二-数学函数" class="headerlink" title="二.数学函数"></a>二.数学函数</h2><h3 id="ROUND-X"><a href="#ROUND-X" class="headerlink" title="ROUND(X)"></a>ROUND(X)</h3><blockquote><p>四舍五入</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(4.51); </span><br><span class="line">ROUND(1.567,2) 第二个参数保留几位小数</span><br></pre></td></tr></table></figure></div><h3 id="ceil-向上取整，返回-gt-该的最小整数"><a href="#ceil-向上取整，返回-gt-该的最小整数" class="headerlink" title="ceil 向上取整，返回&gt;=该的最小整数"></a>ceil 向上取整，返回&gt;=该的最小整数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(1.10);</span><br></pre></td></tr></table></figure></div><h3 id="floor-向下取整，返回-gt-的最大整数"><a href="#floor-向下取整，返回-gt-的最大整数" class="headerlink" title="floor 向下取整，返回&gt;= 的最大整数"></a>floor 向下取整，返回&gt;= 的最大整数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FLOOR(1.10);</span><br></pre></td></tr></table></figure></div><h3 id="TRUNCATE-截断，第二位保留几位小数"><a href="#TRUNCATE-截断，第二位保留几位小数" class="headerlink" title="TRUNCATE 截断，第二位保留几位小数"></a>TRUNCATE 截断，第二位保留几位小数</h3><blockquote></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNCATE(1.10,2);</span><br></pre></td></tr></table></figure></div><h3 id="mod-取余"><a href="#mod-取余" class="headerlink" title="mod 取余"></a>mod 取余</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(7,3);</span><br></pre></td></tr></table></figure></div><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="now-返回当前系统的日期-时间"><a href="#now-返回当前系统的日期-时间" class="headerlink" title="now 返回当前系统的日期+时间"></a>now 返回当前系统的日期+时间</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure></div><h3 id="CURDATE-返回当前系统的日期"><a href="#CURDATE-返回当前系统的日期" class="headerlink" title="CURDATE 返回当前系统的日期"></a>CURDATE 返回当前系统的日期</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURDATE();</span><br></pre></td></tr></table></figure></div><h3 id="CURTIME-返回当前系统的时间"><a href="#CURTIME-返回当前系统的时间" class="headerlink" title="CURTIME 返回当前系统的时间"></a>CURTIME 返回当前系统的时间</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURTIME();</span><br></pre></td></tr></table></figure></div><h3 id="可以获取指定的部分，年，月，日，小时，分钟，秒"><a href="#可以获取指定的部分，年，月，日，小时，分钟，秒" class="headerlink" title="可以获取指定的部分，年，月，日，小时，分钟，秒"></a>可以获取指定的部分，年，月，日，小时，分钟，秒</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT YEAR(NOW()) AS 年;</span><br><span class="line">SELECT YEAR(&apos;2020-1-1&apos;) AS 年;</span><br><span class="line">SELECT MONTH(&apos;2020-1-2&apos;) AS 月;</span><br><span class="line">SELECT DAY(&apos;2020-1-2&apos;) AS 日;</span><br><span class="line">SELECT HOUR(NOW()) AS 小时;</span><br><span class="line">SELECT MINUTE(NOW()) AS 分钟;</span><br><span class="line">SELECT SECOND(NOW()) AS 秒钟;</span><br></pre></td></tr></table></figure></div><h3 id="STR-TO-DATE-str-format"><a href="#STR-TO-DATE-str-format" class="headerlink" title="STR_TO_DATE(str,format)"></a>STR_TO_DATE(str,format)</h3><blockquote><p>将日期格式的字符转换成指定格式的日期</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select STR_TO_DATE(&apos;2020102&apos;,&apos;%Y%m%d&apos;); </span><br><span class="line"></span><br><span class="line">SELECT * from employees WHERE hiredate = STR_TO_DATE(&apos;4-3 1992&apos;,&apos;%c-%d %Y&apos;);</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">序号</th><th align="left">格式符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">%Y</td><td align="left">四位的年份</td></tr><tr><td align="left">2</td><td align="left">%y</td><td align="left">2位的年份</td></tr><tr><td align="left">3</td><td align="left">%m</td><td align="left">月份（01,02,03….）</td></tr><tr><td align="left">4</td><td align="left">%c</td><td align="left">月份（1,2,3….）</td></tr><tr><td align="left">5</td><td align="left">%d</td><td align="left">日（01,02,03….）</td></tr><tr><td align="left">6</td><td align="left">%H</td><td align="left">小时(24小时)</td></tr><tr><td align="left">7</td><td align="left">%h</td><td align="left">小时(12小时)</td></tr><tr><td align="left">8</td><td align="left">%i</td><td align="left">分钟(00,01,…,59)</td></tr><tr><td align="left">9</td><td align="left">%s</td><td align="left">秒(00,01,…,59)</td></tr></tbody></table><h3 id="DATE-FORMAT-date-format"><a href="#DATE-FORMAT-date-format" class="headerlink" title="DATE_FORMAT(date,format)"></a>DATE_FORMAT(date,format)</h3><blockquote><p>将日期格式的字符转换成字符串</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_FORMAT(&apos;2020-1-2&apos;,&apos;%Y年%m月%d日&apos;);</span><br></pre></td></tr></table></figure></div><h3 id="DATEDIFF-expr1-expr2-两个时间的差"><a href="#DATEDIFF-expr1-expr2-两个时间的差" class="headerlink" title="DATEDIFF(expr1,expr2) 两个时间的差"></a>DATEDIFF(expr1,expr2) 两个时间的差</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) FROM employees;</span><br></pre></td></tr></table></figure></div><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><blockquote><p>数据库版本号<br>SELECT VERSION();<br>当前库名<br>SELECT DATABASE();<br>当前用户<br>SELECT USER();</p></blockquote><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><h3 id="if-if-else"><a href="#if-if-else" class="headerlink" title="if ,if else"></a>if ,if else</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(10&lt;5,&apos;大&apos;,&apos;小&apos;);</span><br><span class="line">SELECT last_name,commission_pct,IF(commission_pct IS NULL,&apos;没奖金&apos;,&apos;有奖金&apos;) AS 备注 FROM `employees`;</span><br></pre></td></tr></table></figure></div><h3 id="CASE-使用"><a href="#CASE-使用" class="headerlink" title="CASE 使用"></a>CASE 使用</h3><pre><code>CASE 需要判断的字段或表达式WHEN 常量1 THEN 要显示的值或者语句1;WHEN 常量2 THEN 要显示的值或者语句2;ELSE  其他的 THEN 要显示的值;END;</code></pre><blockquote><p>案例：查询员工的工资，要求<br>部门号=30 ，显示的工资是1.1倍<br>部门号=40 ，显示的工资是1.2倍<br>部门号=50 ，显示的工资是1.3倍<br>其他部门，显示为原工资</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary AS 原始工资,`department_id`,</span><br><span class="line">CASE `department_id`</span><br><span class="line">WHEN 30 THEN salary*1.1</span><br><span class="line">WHEN 40 THEN salary*1.2</span><br><span class="line">WHEN 50 THEN salary*1.3</span><br><span class="line">ELSE salary</span><br><span class="line">END AS 新工资 FROM `employees`;</span><br><span class="line"></span><br><span class="line">SELECT salary,</span><br><span class="line">CASE </span><br><span class="line">WHEN salary&gt;20000 THEN &apos;A&apos;</span><br><span class="line">WHEN salary&gt;15000 THEN &apos;b&apos;</span><br><span class="line">WHEN salary&gt;10000 THEN &apos;c&apos;</span><br><span class="line">ELSE &apos;D&apos;</span><br><span class="line">END AS 工资级别 FROM `employees`;</span><br></pre></td></tr></table></figure></div><h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><blockquote><p>参数支持哪些类型<br>sum 和 avg 只支持 数值类型并且忽略null<br>max 和 min 支持 任意类型的数值并且忽略null<br>count  忽略null<br>和 DISTINCT 搭配 实现去重<br>和分组函数一同查询的字段要求是 group by 后的字段</p></blockquote><h2 id="sum-求和"><a href="#sum-求和" class="headerlink" title="sum 求和"></a>sum 求和</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(salary) FROM employees;</span><br></pre></td></tr></table></figure></div><h2 id="avg-平均值"><a href="#avg-平均值" class="headerlink" title="avg 平均值"></a>avg 平均值</h2><blockquote><p>第二个值保留几位小数</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary,2) FROM employees;</span><br></pre></td></tr></table></figure></div><h2 id="max-最大值"><a href="#max-最大值" class="headerlink" title="max 最大值"></a>max 最大值</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary) FROM employees;</span><br></pre></td></tr></table></figure></div><h2 id="min-最小值"><a href="#min-最小值" class="headerlink" title="min 最小值"></a>min 最小值</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT min(salary) FROM employees;</span><br></pre></td></tr></table></figure></div><h2 id="count-计算个数"><a href="#count-计算个数" class="headerlink" title="count 计算个数"></a>count 计算个数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(salary) FROM employees;</span><br></pre></td></tr></table></figure></div><h2 id="DISTINCT-搭配-实现去重"><a href="#DISTINCT-搭配-实现去重" class="headerlink" title="DISTINCT 搭配 实现去重"></a>DISTINCT 搭配 实现去重</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;</span><br><span class="line">SELECT COUNT(DISTINCT salary) FROM employees;</span><br></pre></td></tr></table></figure></div><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><pre><code>语法：SELECT 分组函数，列(要求出现在GROUP BY 的后面)FROM 表[where 筛选条件]GROUP BY 分组的列表[ORDER BY 排序子句]</code></pre><blockquote><p>注意：查询列表必须特殊，要求是分组函数和group by 后出现的字段</p></blockquote><h3 id="查询每个部门的平均工资"><a href="#查询每个部门的平均工资" class="headerlink" title="查询每个部门的平均工资"></a>查询每个部门的平均工资</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary) FROM employees GROUP BY department_id;</span><br></pre></td></tr></table></figure></div><h3 id="查询每个工种的最高工资"><a href="#查询每个工种的最高工资" class="headerlink" title="查询每个工种的最高工资"></a>查询每个工种的最高工资</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary),job_id FROM employees GROUP BY job_id;</span><br></pre></td></tr></table></figure></div><h2 id="分组查询后筛选-HAVING"><a href="#分组查询后筛选-HAVING" class="headerlink" title="分组查询后筛选 HAVING"></a>分组查询后筛选 HAVING</h2><h3 id="查询那个部门的员工数-gt-2"><a href="#查询那个部门的员工数-gt-2" class="headerlink" title="查询那个部门的员工数&gt;2"></a>查询那个部门的员工数&gt;2</h3><blockquote><p>方式1 HAVING  用于 GROUP BY 后面的筛选</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(1) as total ,department_id FROM employees GROUP BY department_id  HAVING total&gt;2;</span><br></pre></td></tr></table></figure></div><blockquote><p>方式2 子查询的实现方法</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT tatal2.department_id,tatal2.total FROM (SELECT COUNT(1) as total ,department_id FROM employees GROUP BY department_id) as tatal2 WHERE tatal2.total&lt;2;</span><br></pre></td></tr></table></figure></div><h3 id="查询每个有奖金的员工的最高工资-gt-12000的工种编号和最高工资"><a href="#查询每个有奖金的员工的最高工资-gt-12000的工种编号和最高工资" class="headerlink" title="查询每个有奖金的员工的最高工资&gt;12000的工种编号和最高工资"></a>查询每个有奖金的员工的最高工资&gt;12000的工种编号和最高工资</h3><blockquote><p>原始表能查出来的用where  原始表查不出来的用 HAVING</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary) as _Max,job_id FROM employees WHERE commission_pct IS NOT NULL GROUP BY job_id HAVING _Max&gt;12000;</span><br></pre></td></tr></table></figure></div><h3 id="查询领导编号-gt-102-的每个领导手下的最低工资-gt-5000的领导编号是那个，以及最低工资-gt-5000"><a href="#查询领导编号-gt-102-的每个领导手下的最低工资-gt-5000的领导编号是那个，以及最低工资-gt-5000" class="headerlink" title="查询领导编号&gt;102 的每个领导手下的最低工资&gt;5000的领导编号是那个，以及最低工资&gt;5000"></a>查询领导编号&gt;102 的每个领导手下的最低工资&gt;5000的领导编号是那个，以及最低工资&gt;5000</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(salary) as dd,manager_id FROM employees WHERE manager_id&gt;102 GROUP BY manager_id HAVING dd&gt;5000;</span><br></pre></td></tr></table></figure></div><h2 id="按多个字段分组"><a href="#按多个字段分组" class="headerlink" title="按多个字段分组"></a>按多个字段分组</h2>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么代码没有按照编写顺序执行？</title>
      <link href="/2019/05/03/fornt/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E6%8C%89%E7%85%A7%E7%BC%96%E5%86%99%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/"/>
      <url>/2019/05/03/fornt/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E6%8C%89%E7%85%A7%E7%BC%96%E5%86%99%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h3><blockquote><p>要比较同步和异步，可以将调用函数的过程分成两部分：执行操作和返回结果。</p></blockquote><blockquote><p>程序在同步调用函数的时候，会立即执行操作并等待得到返回结果后再继续运行，也就是说同步执行是阻塞的。</p></blockquote><blockquote><p>而异步会将操作和结果在时间上分隔开来，在当下执行操作，在未来某个时刻返回结果，在这个等待返回结果的过程中，程序将继续执行后面的代码。也就是说异步执行是非阻塞的。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncAdd</span>(<span class="params">a, b, cb</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cb(a + b);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">asyncAdd(<span class="number">1</span>, <span class="number">2</span>, <span class="built_in">console</span>.log) <span class="comment">// 1s后打印结果 3</span></span><br></pre></td></tr></table></figure></div><h3 id="异步与回调"><a href="#异步与回调" class="headerlink" title="异步与回调"></a>异步与回调</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  counter: &#123;</span><br><span class="line">    index: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// ?</span></span><br><span class="line">a.counter.index++;</span><br></pre></td></tr></table></figure></div><ul><li>如果你把上面的代码复制粘贴到浏览器控制台中运行，应该可以看到控制台打印了一个可能和你预期不一致的 JSON 对象：{conter:{index: 2}}。</li><li>原因在于浏览器在运行代码的时候，把控制台打印这种涉及 I/O 的操作进行了延迟执行。可能你会猜想是不是控制台打印的只是将对象 a 进行了类似“浅拷贝”的操作，否定这种猜想很简单，此时再执行一次自增操作，就会发现被打印的对象值并没有发生变化。</li><li>既然并非所有异步都回调，那么反过来，是否所有回调函数都是异步执行的呢？答案也是否定的。</li></ul><h3 id="异步原理"><a href="#异步原理" class="headerlink" title="异步原理"></a>异步原理</h3><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><ul><li>对于大多数语言而言，实现异步会通过启动额外的进程、线程或协程来实现，而我们在前面已经提到过，JavaScript 是单线程的。</li></ul><h4 id="为什么单线程还能实现异步呢？"><a href="#为什么单线程还能实现异步呢？" class="headerlink" title="为什么单线程还能实现异步呢？"></a>为什么单线程还能实现异步呢？</h4><ul><li><p>其实也没有什么特殊的黑魔法，只是把一些操作交给了其他线程处理，然后采用了一种称之为“事件循环”（也称“事件轮询”）的机制来处理返回结果。</p></li><li><p>数组 eventLoop 表示事件队列（也有称作“任务队列”），用来存放需要执行的任务事件（可以理解为回调函数），对象 event 变量表示当前需要执行的任务事件</p></li><li><p>用一个永不停止的 while 循环来表示事件循环，每一次循环称为一个 tick。</p></li><li><p>对每个 tick 而言，如果在队列中有等待事件，那么就会从队列中获取一个事件并执行，这些事件通常是回调函数的形式。</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventLoop = []; <span class="comment">// 事件队列，先进先出</span></span><br><span class="line"><span class="keyword">var</span> event; <span class="comment">// 事件执行成功的回调回调函数</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 一次tick</span></span><br><span class="line">  <span class="keyword">if</span> (eventLoop.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 队列中取出回调函数</span></span><br><span class="line">    event = eventLoop.shift();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      event();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reportError(err); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>以 AJAX 请求为例，当我们发出一个 AJAX 请求时，浏览器会将请求任务分派给网络线程来进行处理，当对应的网络线程拿到返回的数据之后，就会把回调函数插入到事件队列中。</li><li>setTimeout 和 setInterval 也是同样的道理，当我们执行 setTimeout 的时候并不是直接把回调函数放入事件队列中。它所做的是交给定时器线程来处理，当定时器到时后，再把回调函数放在事件队列中，这样，在未来的某轮 tick 中获取并执行这个回调函数。</li><li>这么做有一个隐性的问题，如果事件队列中已经有其他事件，那么这个回调就会排队等待。</li><li>所以说 setTimeout/setInterval 定时器的精度并不高。准确地说，它只能确保回调函数不会在指定的时间间隔之前运行，但可能会在那个时刻运行，也可能在那之后运行，这就要根据事件队列的状态而定。</li></ul><h3 id="事件队列"><a href="#事件队列" class="headerlink" title="事件队列"></a>事件队列</h3><blockquote><p>在讲述 setTimeout/setInterval 原理的时候也暴露了事件队列的一个缺陷：事件队列按照先进先出的顺序执行，那么如果队列较长时，排在后面的事件即使较为“紧急”，也得需要等待前面的任务先执行完成。<br>JavaScript 解决这个问题的思路就是：设置多个队列，按照优先级来执行。</p></blockquote><ul><li>这段代码定义了 4 个异步函数 f1、f2、f3、f4，其中：</li></ul><ol><li>函数 f1 通过定时器 setTimeout 向绿色队列中插入一个控制台打印任务，输出数字 1；</li><li>函数 f2 通过 Promise 向红色队列中插入一个控制台打印任务，输出数字 2；</li><li>函数 f3 通过定时器 setTimeout 向绿色队列中插入一个回调函数，该回调函数会调用控制台打印数字 3，并且调用函数 f2；</li><li>函数 f4 通过 Promise 向红色队列中插入一个回调函数，该回调函数会调用控制台打印数字 4，并且调用函数 f1。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="built_in">console</span>.log.bind(<span class="literal">null</span>,<span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="built_in">console</span>.log.bind(<span class="literal">null</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    f2()</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    f1()</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure></div><ul><li>这段代码的执行过程和结果可以查看下图，当调用函数 f3 和函数 f4 之后，绿色队列和红色队列都会被插入一个匿名回调函数。</li></ul><ol><li>第 1 次 tick，由于红色队列优先级高，所以先执行红色匿名函数，控制台打印数字 4，然后调用函数 f1，向绿色队列中插入一个打印函数；</li><li>第 2 次 tick，按照先进先出原则，此时调用匿名函数打印数字 3，并调用函数 f2，向红色队列中插入一个打印函数；</li><li>第 3 次 tick，调用红色队列中的打印函数，控制台打印数字 2；</li><li>第 4 次 tick，调用绿色队列中的打印函数，控制台打印数字 1。</li></ol><p><a href="https://s0.lgstatic.com/i/image/M00/1F/41/CgqCHl7m1W-AUWjTAAGFy-O9UzA843.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" title="alt" data-src="https://s0.lgstatic.com/i/image/M00/1F/41/CgqCHl7m1W-AUWjTAAGFy-O9UzA843.png" class="lazyload"></a></p><blockquote><p>关于红色队列和绿色队列，一般称为“宏任务队列（Macro Task Queue）”和“微任务队列（Micro Task Queue）”，也有的称为“Task Queue”和“Job Queue”。不管如何称呼，我们需要记住的是，不同队列优先级不同，每次事件循环时会从优先级高的队列中获取事件，只有当优先级高的队列为空时才会从优先级低的队列中获取事件，同级队列之间的事件不存在优先级，只遵循先进先出的原则。</p></blockquote><ul><li>常见的异步函数优先级如下，从上到下优先级逐层降低：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">process.nextTick(Node.js) &gt; </span><br><span class="line">MutationObserver(浏览器)/promise.then(<span class="keyword">catch</span>、finnally)&gt;</span><br><span class="line">setImmediate(IE) &gt; </span><br><span class="line">setTimeout/setIntervalrequestAnimationFrame &gt;</span><br><span class="line">其他 I/O 操作 / 浏览器 DOM 事件</span><br></pre></td></tr></table></figure></div><h3 id="处理异步"><a href="#处理异步" class="headerlink" title="处理异步"></a>处理异步</h3><ul><li>由于回调函数这种形式的代码可读性非常差，所以在编写代码的时候要尽量将回调形式转化成返回 Promise 对象的形式，一方面由于 ES6 标准下提供了原生 Promise 对象及方法，另一方面 Promise 的可操作性也更强，比如可以配合 async/await 关键字使用，也可以转换成 Observable 对象。所以越来越多的第三方库异步函数都开始返回 Promise 对象。</li></ul><h3 id="异步串行"><a href="#异步串行" class="headerlink" title="异步串行"></a>异步串行</h3><ul><li><p>将异步转化为串行执行是非常常见的操作，先通过一个简单的例子来回顾基本实现方式。</p></li><li><p>考虑异步函数 asyncF1 和 asyncF2，且 asyncF2 依赖 asyncF1 的返回结果执行。使用 Promise 提供的 then 函数可以直接实现，伪代码如下：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">asyncF1()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> asyncF2(data))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.error(e))</span><br></pre></td></tr></table></figure></div><ul><li>如果使用 async/await 可以摆脱链式调用，代码可读性更好：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> asyncFn1()</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> asyncFn2(data)</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></div><ul><li><p>回顾完基础用法，来提升一下难度。假设现在要按照顺序执行调用 asyncF 函数 n 次，该怎么实现呢？</p></li><li><p>对于这种场景可以通过数组函数 reduce 来实现，而不是简单地使用 for 循环或数组的 forEach 函数，比如像下面这样：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="number">1.</span>..n].reduce(<span class="keyword">async</span> (lastPromise, i) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> lastPromise</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> asyncF())</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve())</span><br></pre></td></tr></table></figure></div><blockquote><p>现在需要延迟打印数组 [1,2,3,4,5]，每一次打印的初始延迟为 1000ms，增长延迟为 500ms。打印结果如下所示：</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 0s:    1</span></span><br><span class="line"><span class="comment">// 1s:    2</span></span><br><span class="line"><span class="comment">// 2.5s:  3</span></span><br><span class="line"><span class="comment">// 4.5s:  4</span></span><br><span class="line"><span class="comment">// 7s:    5</span></span><br></pre></td></tr></table></figure></div><ul><li>这道题也是将多个异步函数改为串行执行的典型例子，所以也可以通过 reduce 函数来实现。由于引入了递增的延迟执行，所以都需要得到上一次执行的延迟时间。具体代码如下：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.reduce(<span class="keyword">async</span> (prs, cur, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> prs</span><br><span class="line">  <span class="keyword">const</span> time = index === <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1000</span> + (index - <span class="number">1</span>) * <span class="number">500</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(cur);</span><br><span class="line">      res(time)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve(<span class="number">0</span>))</span><br></pre></td></tr></table></figure></div><h3 id="异步并行"><a href="#异步并行" class="headerlink" title="异步并行"></a>异步并行</h3><h4 id="Promise-all-promise1-……-promiseN"><a href="#Promise-all-promise1-……-promiseN" class="headerlink" title="Promise.all([promise1 …… promiseN])"></a>Promise.all([promise1 …… promiseN])</h4><ul><li>调用函数 Promise.all 会返回一个新的 Promise 实例，该实例在参数内所有的 promise 都完成 (resolved) 时回调完成 (resolve)；如果参数中  promise 有一个失败（rejected），那么此实例返回第一个失败 promise 的结果。</li><li>当执行的异步函数具有强一致性时可以使用它，比如要更新一个较大的表单数据，会发送多个请求分别更新不同的数据，如果一个请求更新失败则放弃本次提交。</li></ul><h4 id="Promise-allSettled-promise1……promiseN"><a href="#Promise-allSettled-promise1……promiseN" class="headerlink" title="Promise.allSettled([promise1……promiseN])"></a>Promise.allSettled([promise1……promiseN])</h4><ul><li><p>调用函数 Promise.allsellted 会返回一个新的 Promise 实例，该实例会在所有给定的 promise 已经执行完成时返回一个对象数组，每个对象表示对应的 promise 结果。</p></li><li><p>这个函数适用于需要并发执行多个异步函数，这些异步函数的执行结果相互独立。比如同时发送多个 AJAX 请求来分别更新多条数据。</p></li></ul><h4 id="Promise-race-promise1……promiseN"><a href="#Promise-race-promise1……promiseN" class="headerlink" title="Promise.race([promise1……promiseN])"></a>Promise.race([promise1……promiseN])</h4><ul><li><p>调用函数 Promise.race 会返回一个新的 promise 实例，一旦参数中的某个 promise 执行完成，新的 promise 实例就会返回对应 promise 的执行结果。</p></li><li><p>这个函数会让多个并发函数产生“竞争”，从而挑选出最先执行完成的。比如尝试从多个网址加载图片资源。</p></li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>Promise 有一个隐藏的“坑”，那就是内部的异常不能在外部通过 try/catch 所捕获，当内部发生异常时，会自动进入失败状态（rejected）。所以下面的代码是等价的：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="number">0</span>) <span class="comment">// 等价于  reject(new Error(0)) </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="Promise-的局限性"><a href="#Promise-的局限性" class="headerlink" title="Promise 的局限性"></a>Promise 的局限性</h3><ul><li>虽然 Promise 相对于回调具有明显的优势，但其仍然有一些局限性，至少有下面 2 个方面的问题。</li></ul><ol><li>立即执行: 当一个 Promise 实例被创建时，内部的代码就会立即被执行，而且无法从外部停止。比如无法取消超时或消耗性能的异步调用，容易导致资源的浪费。</li><li>单次执行: Promise 处理的问题都是“一次性”的，因为一个 Promise 实例只能 resolve 或 reject 一次，所以面对某些需要持续响应的场景时就会变得力不从心。比如上传文件获取进度时，默认采用的就是通过事件监听的方式来实现。</li></ol><ul><li>所以说 Promise 并不是万能的，全面了解其优缺点能帮助我们更好地使用 Promise。上述这些问题其实都有解决方案，比如使用 RxJS</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数是 JavaScript 的一等公民</title>
      <link href="/2019/05/02/fornt/%E5%87%BD%E6%95%B0%E6%98%AF%20JavaScript%20%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91/"/>
      <url>/2019/05/02/fornt/%E5%87%BD%E6%95%B0%E6%98%AF%20JavaScript%20%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91/</url>
      
        <content type="html"><![CDATA[<p><b>数据类型与函数是很多高级语言中最重要的两个概念</b>前者用来存储数据，后者用来存储代码。JavaScript 中的函数相对于数据类型而言更加复杂，它可以有属性，也可以被赋值给一个变量，还可以作为参数被传递……正是这些强大特性让它成了 JavaScript 的“一等公民”</p><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><blockquote><p>什么是 this？this 是 JavaScript 的一个关键字，一般指向调用它的对象。</p></blockquote><p>这句话其实有两层意思，首先 this 指向的应该是一个对象，更具体地说是函数执行的“上下文对象”。其次这个对象指向的是“调用它”的对象，如果调用它的不是对象或对象不存在，则会指向全局对象（严格模式下为 undefined）。</p><h3 id="下面举几个例子来进行说明"><a href="#下面举几个例子来进行说明" class="headerlink" title="下面举几个例子来进行说明"></a>下面举几个例子来进行说明</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码 1</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.fn() <span class="comment">// o</span></span><br><span class="line"><span class="comment">// 代码 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A() </span><br><span class="line">a.fn()<span class="comment">// a</span></span><br><span class="line"><span class="comment">// 代码 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn() <span class="comment">// 浏览器：Window；Node.js：global</span></span><br></pre></td></tr></table></figure></div><ul><li>当代码 1 执行 fn() 函数时，实际上就是通过对象 o 来调用的，所以 this 指向对象 o。</li><li>代码 2 也是同样的道理，通过实例 a 来调用，this 指向类实例 a。</li><li>代码 3 则可以看成是通过全局对象来调用，this 会指向全局对象（需要注意的是，严格模式下会是 undefined）。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;fn()&#125;</span><br><span class="line">fn2() <span class="comment">//window</span></span><br></pre></td></tr></table></figure></div><ol><li>如果在函数 fn2() 中调用函数 fn()，那么当调用函数 fn2() 的时候，函数 fn() 的 this 指向哪里呢？  –  由于没有找到调用 fn 的对象，所以 this 会指向全局对象</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;fn()&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;fn2&#125;</span><br><span class="line">obj.fn2() <span class="comment">// ?</span></span><br></pre></td></tr></table></figure></div><ol start="2"><li>再把这段代码稍稍改变一下，让函数 fn2() 作为对象 obj 的属性，通过 obj 属性来调用 fn2，此时函数 fn() 的 this 指向哪里呢？</li></ol><ul><li>这里需要注意，调用函数 fn() 的是函数 fn2() 而不是 obj。虽然 fn2() 作为 obj 的属性调用，但 fn2()中的 this 指向并不会传递给函数 fn()， 所以答案也是 window（Node.js 下是 global）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dx = &#123;</span><br><span class="line">  arr: [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">dx.arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;) <span class="comment">// ?</span></span><br></pre></td></tr></table></figure></div><ol start="3"><li>对象 dx 拥有数组属性 arr，在属性 arr 的 forEach 回调函数中输出 this，指向的是什么呢？</li></ol><ul><li>按照之前的说法，很多同学可能会觉得输出的应该是对象 dx 的属性 arr 数组。但其实仍然是全局对象。</li><li>forEach 的说明文档便会知道，它有两个参数，第一个是回调函数，第二个是 this 指向的对象，这里只传入了回调函数，第二个参数没有传入，默认为 undefined，所以正确答案应该是输出全局对象。类似的，需要传入 this 指向的函数还有：every()、find()、findIndex()、map()、some()，在使用的时候需要特别注意。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B()</span><br><span class="line"><span class="keyword">var</span> fun = b.fn</span><br><span class="line">fun() <span class="comment">// ?</span></span><br></pre></td></tr></table></figure></div></li></ul><ol start="4"><li>前面提到通过类实例来调用函数时，this 会指向实例。那么如果像下面的代码，创建一个 fun 变量来引用实例 b 的 fn() 函数，当调用 fun() 的时候 this 会指向什么呢？这道题你可能会很容易回答出来：fun 是在全局下调用的，所以 this 应该指向的是全局对象。这个思路没有没问题，但是这里有个隐藏的知识点。那就是 ES6 下的 class 内部默认采用的是严格模式，实际上面代码的类定义部分可以理解为下面的形式。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><ul><li>而严格模式下不会指定全局对象为默认调用对象，所以答案是 undefined。</li></ul><p>5.ES6 新加入的箭头函数不会创建自己的 this，它只会从自己的作用域链的上一层继承 this。可以简单地理解为<b>箭头函数的 this 继承自上层的 this</b>但在全局环境下定义仍会指向全局对象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrow = &#123;<span class="attr">fn</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;&#125;</span><br><span class="line">arrow.fn() <span class="comment">// ?</span></span><br></pre></td></tr></table></figure></div><ul><li>所以虽然通过对象 arrow 来调用箭头函数 fn()，那么 this 指向不是 arrow 对象，而是全局对象。如果要让 fn() 箭头函数指向 arrow 对象，我们还需要再加一层函数，让箭头函数的上层 this 指向 arrow 对象。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrow = &#123;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    a()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">arrow.fn()  <span class="comment">// arrow</span></span><br></pre></td></tr></table></figure></div></li></ul><ol start="6"><li>前面提到 this 指向的要么是调用它的对象，要么是 undefined，那么如果将 this 指向一个基础类型的数据会发生什么呢？比如下面的代码将 this 指向数字 0，打印出的 this 是什么呢？<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;, <span class="number">0</span>) <span class="comment">// ?</span></span><br></pre></td></tr></table></figure></div></li></ol><ul><li>结合上一讲关于数据类型的知识，我们知道基础类型也可以转换成对应的引用对象。所以这里 this 指向的是一个值为 0 的 Number 类型对象。</li></ul><ol start="7"><li>改变 this 指向的常见 3 种方式有 bind、call 和 apply。call 和 apply 用法功能基本类似，都是通过传入 this 指向的对象以及参数来调用函数。区别在于传参方式，前者为逐个参数传递，后者将参数放入一个数组，以数组的形式传递。bind 有些特殊，它不但可以绑定 this 指向也可以绑定函数参数并返回一个新的函数，当 c 调用新的函数时，绑定之后的 this 或参数将无法再被改变。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;</span><br><span class="line"><span class="keyword">var</span> b = getName.bind(&#123;<span class="attr">name</span>: <span class="string">'bind'</span>&#125;)</span><br><span class="line">b()</span><br><span class="line">getName.call(&#123;<span class="attr">name</span>: <span class="string">'call'</span>&#125;)</span><br><span class="line">getName.apply(&#123;<span class="attr">name</span>: <span class="string">'apply'</span>&#125;)</span><br></pre></td></tr></table></figure></div></li></ol><ul><li>由于 this 指向的不确定性，所以很容易在调用时发生意想不到的情况。在编写代码时，应尽量避免使用 this，比如可以写成纯函数的形式，也可以通过参数来传递上下文对象。实在要使用 this 的话，可以考虑使用 bind 等方式将其绑定。</li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数和普通函数相比，有以下几个区别，在开发中应特别注意：</p><ul><li>不绑定 arguments 对象，也就是说在箭头函数内访问 arguments 对象会报错；</li><li>不能用作构造器，也就是说不能通过关键字 new 来创建实例；</li><li>默认不会创建 prototype 原型属性；</li><li>不能用作 Generator() 函数，不能使用 yeild 关键字。</li></ul><h3 id="函数的转换"><a href="#函数的转换" class="headerlink" title="函数的转换"></a>函数的转换</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)<span class="comment">// 3</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)(<span class="number">6</span>) <span class="comment">// 21</span></span><br></pre></td></tr></table></figure></div><ul><li><p>对于不定参数的求和处理比较简单，很容易想到通过 arguments 或者扩展符的方式获取数组形式的参数，然后通过 reduce 累加求和。但如果直接返回结果那么后面的调用肯定会报错，所以每次返回的必须是函数，才能保证可以连续调用。也就是说 add 返回值既是一个可调用的函数又是求和的数值结果。</p></li><li><p>要实现这个要求，我们必须知道函数相关的两个隐式转换函数 toString() 和 valueOf()。toString() 函数会在打印函数的时候调用，比如 console.log、valueOf 会在获取函数原始值时调用，比如加法操作。</p></li><li><p>具体代码实现如下，在 add() 函数内部定义一个 fn() 函数并返回。fn() 函数的主要职能就是拼接参数并返回自身，当调用 toString() 和 valueOf() 函数时对拼接好的参数进行累加求和并返回。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = args</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...newArgs</span>) </span>&#123;</span><br><span class="line">    arr = [...args, ...newArgs]</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;</span><br><span class="line">  fn.toString = fn.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="built_in">parseInt</span>(cur))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul><li>原型是 JavaScript 的重要特性之一，可以让对象从其他对象继承功能特性，所以 JavaScript 也被称为“基于原型的语言”。</li><li>严格地说，原型应该是对象的特性，但函数其实也是一种特殊的对象。例如，我们对自定义的函数进行 instanceof Object 操作时，其结果是 true。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">fn <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h3 id="什么是原型和原型链？"><a href="#什么是原型和原型链？" class="headerlink" title="什么是原型和原型链？"></a>什么是原型和原型链？</h3><blockquote><p>简单地理解，原型就是对象的属性，包括被称为隐式原型的 proto 属性和被称为显式原型的 prototype 属性。</p></blockquote><p>-隐式原型通常在创建实例的时候就会自动指向构造函数的显式原型。例如，在下面的示例代码中，当创建对象 a 时，a 的隐式原型会指向构造函数 Object() 的显式原型。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line">a.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> b= <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">b.__proto__ === a.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><blockquote><p>显式原型是内置函数（比如 Date() 函数）的默认属性，在自定义函数时（箭头函数除外）也会默认生成，生成的显式原型对象只有一个属性 constructor ，该属性指向函数自身。通常配合 new 关键字一起使用，当通过 new 关键字创建函数实例时，会将实例的隐式原型指向构造函数的显式原型。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line">fn.prototype.constructor === fn <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><blockquote><p>下面的代码声明了 parent 和 child 两个对象，其中对象 child 定义了属性 name 和隐式原型 proto，隐式原型指向对象 parent，对象 parent 定义了 code 和 name 两个属性。</p></blockquote><blockquote><p>当打印 child.name 的时候会输出对象 child 的 name 属性值，当打印 child.code 时由于对象 child 没有属性 code，所以会找到原型对象 parent 的属性 code，将 parent.code 的值打印出来。同时可以通过打印结果看到，对象 parent 并没有显式原型属性。如果要区分对象 child 的属性是否继承自原型对象，可以通过 hasOwnProperty() 函数来判断。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;<span class="attr">code</span>:<span class="string">'p'</span>,<span class="attr">name</span>:<span class="string">'parent'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> child = &#123;<span class="attr">__proto__</span>: parent, <span class="attr">name</span>: <span class="string">'child'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(parent.prototype) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(child.name) <span class="comment">// "child"</span></span><br><span class="line"><span class="built_in">console</span>.log(child.code) <span class="comment">// "p"</span></span><br><span class="line">child.hasOwnProperty(<span class="string">'name'</span>) <span class="comment">// true</span></span><br><span class="line">child.hasOwnProperty(<span class="string">'code'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><blockquote><p>在这个例子中，如果对象 parent 也没有属性 code，那么会继续在对象 parent 的原型对象中寻找属性 code，以此类推，逐个原型对象依次进行查找，直到找到属性 code 或原型对象没有指向时停止。这种类似递归的链式查找机制被称作“原型链”。</p></blockquote><h3 id="new-操作符实现了什么？"><a href="#new-操作符实现了什么？" class="headerlink" title="new 操作符实现了什么？"></a>new 操作符实现了什么？</h3><blockquote><p>前面提到显式原型对象在使用 new 关键字的时候会被自动创建。现在再来具体分析通过 new 关键字创建函数实例时到底发生了什么。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params">init</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F(args)</span><br></pre></td></tr></table></figure></div><p>其中主要包含了 3 个步骤：</p><ol><li>创建一个临时的空对象，为了表述方便，我们命名为 fn，让对象 fn 的隐式原型指向函数 F 的显式原型；</li><li>执行函数 F()，将 this 指向对象 fn，并传入参数 args，得到执行结果 result；</li><li>判断上一步的执行结果 result，如果 result 为非空对象，则返回 result，否则返回 fn。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="built_in">Object</span>.create(F.prototype)</span><br><span class="line"><span class="keyword">var</span> obj = F.apply(fn, args)</span><br><span class="line"><span class="keyword">var</span> f = obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> ? obj : fn;</span><br></pre></td></tr></table></figure></div></li></ol><h3 id="怎么通过原型链实现多层继承？"><a href="#怎么通过原型链实现多层继承？" class="headerlink" title="怎么通过原型链实现多层继承？"></a>怎么通过原型链实现多层继承？</h3><blockquote><p>假设构造函数 B() 需要继承构造函数 A()，就可以通过将函数 B() 的显式原型指向一个函数 A() 的实例，然后再对 B 的显式原型进行扩展。那么通过函数 B() 创建的实例，既能访问用函数 B() 的属性 b，也能访问函数 A() 的属性 a，从而实现了多层继承。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = <span class="keyword">new</span> A()</span><br><span class="line">B.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> B()</span><br><span class="line">c.b() <span class="comment">// 'b'</span></span><br><span class="line">c.a() <span class="comment">// 'a'</span></span><br></pre></td></tr></table></figure></div><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>作用域是指赋值、取值操作的执行范围，通过作用域机制可以有效地防止变量、函数的重复定义，以及控制它们的可访问性。</p></li><li><p>虽然在浏览器端和 Node.js 端作用域的处理有所不同，比如对于全局作用域，浏览器会自动将未主动声明的变量提升到全局作用域，而 Node.js 则需要显式的挂载到 global 对象上。又比如在 ES6 之前，浏览器不提供模块级别的作用域，而 Node.js 的 CommonJS 模块机制就提供了模块级别的作用域。但在类型上，可以分为全局作用域（window/global）、块级作用域（let、const、try/catch）、模块作用域（ES6 Module、CommonJS）及函数作用域。</p><h3 id="命名提升"><a href="#命名提升" class="headerlink" title="命名提升"></a>命名提升</h3><blockquote><p>对于使用 var 关键字声明的变量以及创建命名函数的时候，JavaScript 在解释执行的时候都会将其声明内容提升到作用域顶部，这种机制称为“命名提升”</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br></pre></td></tr></table></figure></div></li><li><p>函数的命名提升则意味着可以在同级作用域或者子级作用域里，在函数定义之前进行调用。</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn() <span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>在函数内部访问外部函数作用域时就会产生闭包。闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来。这种关联不只是跨作用域引用，也可以实现数据与函数的隔离。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SingleStudent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> _student; </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_student) <span class="keyword">return</span> _student;</span><br><span class="line">        _student = <span class="keyword">new</span> Student()</span><br><span class="line">        <span class="keyword">return</span> _student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> SingleStudent()</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> SingleStudent()</span><br><span class="line">s === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><ul><li>函数 SingleStudent 内部通过闭包创建了一个私有变量 _student，这个变量只能通过返回的匿名函数来访问，匿名函数在返回变量时对其进行判断，如果存在则直接返回，不存在则在创建保存后返回。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器如何渲染页面？</title>
      <link href="/2019/04/20/fornt/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/04/20/fornt/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器如何渲染页面？"><a href="#浏览器如何渲染页面？" class="headerlink" title="浏览器如何渲染页面？"></a>浏览器如何渲染页面？</h2><p> 假如我们在浏览器中输入了一个网址，得到了下面的 html 文件，渲染引擎是怎样通过解析代码生成页面的呢？</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    lagou</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="从-HTML-到-DOM"><a href="#从-HTML-到-DOM" class="headerlink" title="从 HTML 到 DOM"></a>从 HTML 到 DOM</h3><ol><li>字节流解码<br>对于上面的代码，我们看到的是它的字符形式。而浏览器通过 HTTP 协议接收到的文档内容是字节数据，下图是抓包工具截获的报文截图，报文内容为左侧高亮显示的区域（为了查看方便，该工具将字节数据以十六进制方式显示）。当浏览器得到字节数据后，通过“编码嗅探算法”来确定字符编码，然后根据字符编码将字节流数据进行解码，生成截图右侧的字符数据，也就是我们编写的代码。<br>这个把字节数据解码成字符数据的过程称之为“字节流解码”</li><li>输入流预处理<br>通过上一步解码得到的字符流数据在进入解析环节之前还需要进行一些预处理操作。比如将换行符转换成统一的格式，最终生成规范化的字符流数据，这个把字符数据进行统一格式化的过程称之为“输入流预处理”。</li><li>令牌化<br>经过前两步的数据解码和预处理，下面就要进入重要的解析步骤了。<br>解析包含两步，第一步是将字符数据转化成令牌（Token），第二步是解析 HTML 生成 DOM 树。先来说说令牌化，其过程是使用了一种类似状态机的算法，即每次接收一个或多个输入流中的字符；然后根据当前状态和这些字符来更新下一个状态，也就是说在不同的状态下接收同样的字符数据可能会产生不同的结果，比如当接收到“body”字符串时，在标签打开状态会解析成标签，在标签关闭状态则会解析成文本节点。</li></ol><p>上述 html 代码的标记过程如下：</p><ul><li>初始化为“数据状态”（Data State）；</li><li>匹配到字符 &lt;，状态切换到 “标签打开状态”（Tag Open State）；</li><li>匹配到字符 !，状态切换至 “标签声明打开状态”（Markup Declaration Open State），后续 7 个字符可以组成字符串 DOCTYPE，跳转到 “DOCTYPE 状态”（DOCTYPE State）；</li><li>匹配到字符为空格，当前状态切换至 “DOCTYPE 名称之前状态”（Before DOCTYPE Name State）；</li><li>匹配到字符串 html，创建一个新的 DOCTYPE 标记，标记的名字为 “html” ，然后当前状态切换至 “DOCTYPE 名字状态”（DOCTYPE Name State）；</li><li>匹配到字符 &gt;，跳转到 “数据状态” 并且释放当前的 DOCTYPE 标记；</li><li>匹配到字符 &lt;，切换到 “标签打开状态”；</li><li>匹配到字符 h，创建一个新的起始标签标记，设置标记的标签名为空，当前状态切换至 “标签名称状态”（Tag Name State）；</li><li>从字符 h 开始解析，将解析的字符一个一个添加到创建的起始标签标记的标签名中，直到匹配到字符 &gt;，此时当前状态切换至 “数据状态” 并释放当前标记，当前标记的标签名为 “html” 。</li><li>解析后续的 的方式与 一致，创建并释放对应的起始标签标记，解析完毕后，当前状态处于 “数据状态” ；</li><li>匹配到字符串 “标记” ，针对每一个字符，创建并释放一个对应的字符标记，解析完毕后，当前状态仍然处于 “数据状态” ；</li><li>匹配到字符 &lt;，进入 “标签打开状态” ；</li><li>匹配到字符 /，进入 “结束标签打开状态”（End Tag Open State）；</li><li>匹配到字符 b，创建一个新的结束标签标记，设置标记的标签名为空，当前状态切换至“标签名称状态”（Tag Name State）；</li><li>重新从字符 b 开始解析，将解析的字符一个一个添加到创建的结束标签标记的标签名中，直到匹配到字符 &gt;，此时当前状态切换至 “数据状态” 并释放当前标记，当前标记的标签名为 “body”；</li><li>解析 的方式与 一样；</li><li>所有的 html 标签和文本解析完成后，状态切换至 “数据状态” ，一旦匹配到文件结束标志符（EOF），则释放 EOF 标记。<br>最终生成类似下面的令牌结构：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始标签:html</span><br><span class="line">  开始标签:head</span><br><span class="line">  结束标签:head</span><br><span class="line">  开始标签:body</span><br><span class="line">    字符串:lagou</span><br><span class="line">  结束标签:body</span><br><span class="line">结束标签:html</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="补充-1：遇到-script-标签时的处理"><a href="#补充-1：遇到-script-标签时的处理" class="headerlink" title="补充 1：遇到 script 标签时的处理"></a>补充 1：遇到 script 标签时的处理</h3><p>如果在 HTML 解析过程中遇到 script 标签，则会发生一些变化。</p><p>如果遇到的是内联代码，也就是在 script 标签中直接写代码，那么解析过程会暂停，执行权限会转给 JavaScript 脚本引擎，待 JavaScript 脚本执行完成之后再交由渲染引擎继续解析。有一种情况例外，那就是脚本内容中调用了改变 DOM 结构的 document.write() 函数，此时渲染引擎会回到第二步，将这些代码加入字符流，重新进行解析。</p><p>如果遇到的是外链脚本,根据标签属性来执行对应的操作。</p><ol start="4"><li>构建 DOM 树<br>解析 HTML 的第二步是树构建。</li></ol><p>浏览器在创建解析器的同时会创建一个 Document 对象。在树构建阶段，Document 会作为根节点被不断地修改和扩充。标记步骤产生的令牌会被送到树构建器进行处理。HTML 5 标准中定义了每类令牌对应的 DOM 元素，当树构建器接收到某个令牌时就会创建该令牌对应的 DOM 元素并将该元素插入到 DOM 树中。</p><p>为了纠正元素标签嵌套错位的问题和处理未关闭的元素标签，树构建器创建的新 DOM 元素还会被插入到一个开放元素栈中。<br>树构建算法也可以采用状态机的方式来描述，具体我们以步骤 1 的 HTML 代码为例进行举例说明。</p><ul><li>进入初始状态 “initial” 模式；</li><li>树构建器接收到 DOCTYPE 令牌后，树构建器会创建一个 DocumentType 节点附加到 Document 节点上，DocumentType 节点的 name 属性为 DOCTYPE 令牌的名称，切换到 “before html” 模式；</li><li>接收到令牌 html 后，树构建器创建一个 html 元素并将该元素作为 Document 的子节点插入到 DOM 树中和开放元素栈中，切换为 “before head” 模式；</li><li>虽然没有接收到 head 令牌，但仍然会隐式地创建 head 元素并加到 DOM 树和开放元素栈中，切换到“in head”模式；</li><li>将开放元素栈中的 head 元素弹出，进入 “after head”模式；<br>接收到 body 令牌后，会创建一个 body 元素插入到 DOM 树中同时压入开放元素栈中，当前状态切换为 “in body” 模式；</li><li>接收到字符令牌，创建 Text 节点，节点值为字符内容“标记”，将 Text 节点作为 body 元素节点插入到 DOM 树中；</li><li>接收到结束令牌 body，将开放元素栈中的 body 元素弹出，切换至 “after body” 模式；</li><li>接收到结束令牌 html，将开放元素栈中的 html 元素弹出，切换至 “after after body” 模式；</li><li>接收到 EOF 令牌，树构建器停止构建，html 文档解析过程完成。<br>最终生成下面的 DOM 树结构：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">              Document</span><br><span class="line">             /        \</span><br><span class="line">DocumentType           HTMLHtmlElement</span><br><span class="line">                      /               \</span><br><span class="line">       HTMLHeadElement                 HTMLBodyElement</span><br><span class="line">                                              |</span><br><span class="line">                                          TextNode</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="补充-2：从-CSS-到-CSSOM"><a href="#补充-2：从-CSS-到-CSSOM" class="headerlink" title="补充 2：从 CSS 到 CSSOM"></a>补充 2：从 CSS 到 CSSOM</h3><p>CSS 解析的过程与 HTML 解析过程步骤一致，最终也会生成树状结构。<br>与 DOM 树不同的是，CSSOM 树的节点具有继承特性，也就是会先继承父节点样式作为当前样式，然后再进行补充或覆盖。<br><a href="https://s0.lgstatic.com/i/image/M00/12/E2/Ciqc1F7OM-mAO8T2AAGu2Fxum4w061.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/12/E2/Ciqc1F7OM-mAO8T2AAGu2Fxum4w061.png" class="lazyload" title="alt"></a></p><h3 id="从-DOM-到渲染"><a href="#从-DOM-到渲染" class="headerlink" title="从 DOM 到渲染"></a>从 DOM 到渲染</h3><p>有了 DOM 树和 CSSOM 树之后，渲染引擎就可以开始生成页面了。</p><ol start="5"><li>构建渲染树<br>DOM 树包含的结构内容与 CSSOM 树包含的样式规则都是独立的，为了更方便渲染，先需要将它们合并成一棵渲染树。</li></ol><p>这个过程会从 DOM 树的根节点开始遍历，然后在 CSSOM 树上找到每个节点对应的样式。</p><p>遍历过程中会自动忽略那些不需要渲染的节点（比如脚本标记、元标记等）以及不可见的节点（比如设置了“display:none”样式）。同时也会将一些需要显示的伪类元素加到渲染树中。</p><p>对于上面的 HTML 和 CSS 代码，最终生成的渲染树就只有一个 body 节点，样式为 font-size:12px。</p><ol start="6"><li>布局<br>生成了渲染树之后，就可以进入布局阶段了，布局就是计算元素的大小及位置。</li></ol><p>计算元素布局是一个比较复杂的操作，因为需要考虑的因素有很多，包括字体大小、换行位置等，这些因素会影响段落的大小和形状，进而影响下一个段落的位置。</p><p>布局完成后会输出对应的“盒模型”，它会精确地捕获每个元素的确切位置和大小，将所有相对值都转换为屏幕上的绝对像素。<br>7. 绘制<br>绘制就是将渲染树中的每个节点转换成屏幕上的实际像素的过程。得到布局树这份“施工图”之后，渲染引擎并不能立即绘制，因为还不知道绘制顺序，如果没有弄清楚绘制顺序，那么很可能会导致页面被错误地渲染。</p><p>例如，对于使用 z-index 属性的元素（如遮罩层）如果未按照正确的顺序绘制，则将导致渲染结果和预期不符（失去遮罩作用）。</p><p>所以绘制过程中的第一步就是遍历布局树，生成绘制记录，然后渲染引擎会根据绘制记录去绘制相应的内容。</p><p>对于无动画效果的情况，只需要考虑空间维度，生成不同的图层，然后再把这些图层进行合成，最终成为我们看到的页面。当然这个绘制过程并不是静态不变的，会随着页面滚动不断合成新的图形。</p><p>浏览器进行CSS选择器匹配时，是从右向左进行的，所以可以推知是自下而上</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何管理你的 CSS 代码？</title>
      <link href="/2019/04/14/fornt/css/"/>
      <url>/2019/04/14/fornt/css/</url>
      
        <content type="html"><![CDATA[<h2 id="如何组织样式文件"><a href="#如何组织样式文件" class="headerlink" title="如何组织样式文件"></a>如何组织样式文件</h2><p>尽管 CSS 提供了 import 命令支持文件引用，但由于其存在一些问题（比如影响浏览器并行下载、加载顺序错乱等）导致使用率极低。更常见的做法是通过预处理器或编译工具插件来引入样式文件</p><h3 id="管理样式文件的目的就是为了让开发人员更方便地维护代码。"><a href="#管理样式文件的目的就是为了让开发人员更方便地维护代码。" class="headerlink" title="管理样式文件的目的就是为了让开发人员更方便地维护代码。"></a>管理样式文件的目的就是为了让开发人员更方便地维护代码。</h3><p>具体来说就是将样式文件进行分类，把相关的文件放在一起。让工程师在修改样式的时候更容易找到对应的样式文件，在创建样式文件的时候更容易找到对应的目录。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">|</span><br><span class="line">|– abstracts/</span><br><span class="line">|   |– _variables.scss    </span><br><span class="line">|   |– _functions.scss    </span><br><span class="line">|   |– _mixins.scss       </span><br><span class="line">|   |– _placeholders.scss </span><br><span class="line">|</span><br><span class="line">|– base/</span><br><span class="line">|   |– _reset.scss        </span><br><span class="line">|   |– _typography.scss   </span><br><span class="line">|   …                     </span><br><span class="line">|</span><br><span class="line">|– components/</span><br><span class="line">|   |– _buttons.scss      </span><br><span class="line">|   |– _carousel.scss     </span><br><span class="line">|   |– _cover.scss        </span><br><span class="line">|   |– _dropdown.scss     </span><br><span class="line">|   |- header/</span><br><span class="line">|      |- header.tsx</span><br><span class="line">|      |- header.sass</span><br><span class="line">|   |- footer/</span><br><span class="line">|      |- footer.tsx</span><br><span class="line">|      |- footer.sass</span><br><span class="line">|   …                     </span><br><span class="line">|</span><br><span class="line">|– pages/</span><br><span class="line">|   |– _home.scss         </span><br><span class="line">|   |– _contact.scss      </span><br><span class="line">|   …                     </span><br><span class="line">|</span><br></pre></td></tr></table></figure></div><h2 id="如何避免样式冲突"><a href="#如何避免样式冲突" class="headerlink" title="如何避免样式冲突"></a>如何避免样式冲突</h2><p>由于 CSS 的规则是全局的，任何一个样式规则，都对整个页面有效，所以如果不对选择器的命名加以管控会很容易产生冲突。</p><h3 id="手动命名"><a href="#手动命名" class="headerlink" title="手动命名"></a>手动命名</h3><p>最简单有效的命名管理方式就是制定一些命名规则，比如 OOCSS、BEM、AMCSS，其中推荐比较常用的 BEM(Block、Element、Modifier ) Block 代表独立的功能组件，Element 代表功能组件的一个组成部分，Modifier 对应状态信息。</p><h3 id="工具命名"><a href="#工具命名" class="headerlink" title="工具命名"></a>工具命名</h3><p>通过命名规范来避免冲突的方式固然是好的，但这种规范约束也不能绝对保证样式名的唯一性，而且也没有有效的校验工具来保证命名正确无冲突。所以，聪明的开发者想到了通过插件将原命名转化成不重复的随机命名，从根本上避免命名冲突。比较著名的解决方案就是 CSS Modules。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line">.className &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 借助 css Modules 插件，可以将 css 以 JSON 对象的形式引用和使用。 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">"./style.css"</span>;</span><br><span class="line"><span class="comment">// import &#123; className &#125; from "./style.css";</span></span><br><span class="line">element.innerHTML = <span class="string">'&lt;div class="'</span> + styles.className + <span class="string">'"&gt;'</span>;</span><br><span class="line"><span class="comment">// 编译之后的代码，样式类名被转化成了随机名称：</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"_3zyde4l1yATCOkgn-DBWEL"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">._3zyde4l1yATCOkgn-DBWEL &#123;</span></span><br><span class="line"><span class="regexp">  color: green;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></div><p>但这种命名方式带来了一个问题，那就是如果想在引用组件的同时，覆盖它的样式会变得困难，因为编译后的样式名是随机。例如，在上面的示例代码中，如果想在另一个组件中覆盖 className 样式就很困难，而在手动命名情况下则可以直接重新定义 className 样式进行覆盖。</p><h2 id="如何高效复用样式"><a href="#如何高效复用样式" class="headerlink" title="如何高效复用样式"></a>如何高效复用样式</h2><p>如果你有一些项目开发经历，一定发现了某些样式会经常被重复使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display:inline-block</span><br><span class="line">clear:both</span><br><span class="line">position:relative</span><br></pre></td></tr></table></figure></div><h3 id="哪些样式规则可以设置为全局公共样式呢？"><a href="#哪些样式规则可以设置为全局公共样式呢？" class="headerlink" title="哪些样式规则可以设置为全局公共样式呢？"></a>哪些样式规则可以设置为全局公共样式呢？</h3><ul><li>首先是具有枚举值的属性，除了上面提到的，还包括 cursor:pointer、float:left 等。</li><li>其次是那些特定数值的样式属性值，比如 margin: 0、left: 0、height: 100%。</li><li>最后是设计规范所使用的属性，比如设计稿中规定的几种颜色。</li></ul><p>样式按照小粒度拆分之后命名规范也很重要，合理的命名规范可以避免公共样式重复定义，开发时方便快速引用。</p><h2 id="值得关注的-CSS-in-JavaScript"><a href="#值得关注的-CSS-in-JavaScript" class="headerlink" title="值得关注的 CSS in JavaScript"></a>值得关注的 CSS in JavaScript</h2><p>我们都知道 Web 标准提倡结构、样式、行为分离（分别对应 HTML、CSS、JavaScript 三种语言），但 React.js 的一出现就开始颠覆了这个原则。</p><p>先是通过 JSX 将 HTML 代码嵌入进 JavaScript 组件，然后又通过 CSS in JavaScript 的方式将 CSS 代码也嵌入进 JavaScript 组件。这种“all in JavaScript”的方式确实有悖 Web 标准。但这种编写方式和日益盛行的组件化概念非常契合，具有“高内聚”的特性，所以未来标准有所改变也未尝不可能。这也正是我们需要关注 CSS in JavaScript 技术的原因。</p><p>相对于使用预处理语言编写样式，CSS in JavaScript 具有两个不那么明显的优势：</p><ul><li>可以通过随机命名解决作用域问题，但命名规则和 CSS Modules 都可以解决这个问题；</li><li>样式可以使用 JavaScript 语言特性，比如函数、循环，实现元素不同的样式效果可以通过新建不同样式类，修改元素样式类来实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端的防抖，节流，代理</title>
      <link href="/2019/04/10/fornt/DOM2/"/>
      <url>/2019/04/10/fornt/DOM2/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>   试想这样的一个场景，有一个搜索输入框，为了提升用户体验，希望在用户输入后可以立即展现搜索结果，而不是每次输入完后还要点击搜索按钮。最基本的实现方式应该很容易想到，那就是绑定 input 元素的键盘事件，然后在监听函数中发送 AJAX 请求。伪代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>)</span><br><span class="line">ipt.addEventListener(<span class="string">'input'</span>, e =&gt; &#123;</span><br><span class="line">  search(e.target.value).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;, e =&gt; &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>  但其实这样的写法很容易造成性能问题。比如当用户在搜索“lagou”这个词的时候，每一次输入都会触发搜索：</p><pre><code>搜索“b”搜索“ba”搜索“bai”搜索“baid”搜索“baidu”</code></pre><p>而实际上，只有最后一次搜索结果是用户想要的，前面进行了 4 次无效查询，浪费了网络带宽和服务器资源。</p><p>所以对于这类连续触发的事件，需要添加一个<strong>“防抖”功能</strong>，为函数的执行<b>设置一个合理的时间间隔，避免事件在时间间隔内频繁触发，同时又保证用户输入后能即时看到搜索结果。</b></p><p>要实现这样一个功能我们很容易想到使用 setTimeout() 函数来让函数延迟执行。就像下面的伪代码，当每次调用函数时，先判断 timeout 实例是否存在，如果存在则销毁，然后创建一个新的定时器。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码1</span></span><br><span class="line"><span class="keyword">const</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>)</span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">ipt.addEventListener(<span class="string">'input'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(timeout) &#123;</span><br><span class="line">    clearTimeout(timeout)</span><br><span class="line">    timeout = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    search(e.target.value).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;, e =&gt; &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>问题确实是解决了，但这并不是最优答案，或者说我们需对这个防抖操作进行一些“优化”。</p><p>试想一下，如果另一个搜索框也需要添加防抖，是不是也要把 timeout 相关的代码再编写一次？而其实这个操作是完全可以抽取成公共函数的。</p><p>在抽取成公共函数的同时，还需要考虑更复杂的情况：</p><ul><li>参数和返回值如何传递？</li><li>防抖化之后的函数是否可以立即执行？</li><li>防抖化的函数是否可以手动取消？</li></ul><p>具体代码如下所示，首先将原函数作为参数传入 debounce() 函数中，同时指定延迟等待时间，返回一个新的函数，这个函数包含 cancel 属性，用来取消原函数执行。flush 属性用来立即调用原函数，同时将原函数的执行结果以 Promise 的形式返回。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码2</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, wait = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> args</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">debounced</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    args = arg</span><br><span class="line">    <span class="keyword">if</span>(timeout) &#123;</span><br><span class="line">      clearTimeout(timeout)</span><br><span class="line">      timeout = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以Promise的形式返回函数执行结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">      timeout = setTimeout(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = <span class="keyword">await</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">          res(result)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          rej(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许取消</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeout)</span><br><span class="line">    timeout = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许立即执行</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cancel()</span><br><span class="line">    <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">  debounced.cancel = cancel</span><br><span class="line">  debounced.flush = flush</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们在写代码解决当前问题的时候，最初只能写出像代码 1 那样满足需求的代码。但要成为高级工程师，就一定要将问题再深想一层，比如代码如何抽象成公共函数，才能得到较为完善的代码 2，从而自身得到成长。</p><h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><p>现在来考虑另外一个场景，一个左右两列布局的查看文章页面，左侧为文章大纲结构，右侧为文章内容。现在需要添加一个功能，就是当用户滚动阅读右侧文章内容时，左侧大纲相对应部分高亮显示，提示用户当前阅读位置。<br>这个功能的实现思路比较简单，滚动前先记录大纲中各个章节的垂直距离，然后监听 scroll 事件的滚动距离，根据距离的比较来判断需要高亮的章节。伪代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 监听scroll事件</span></span><br><span class="line">wrap.addEventListener(<span class="string">'scroll'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> highlightId = <span class="string">''</span></span><br><span class="line">  <span class="comment">// 遍历大纲章节位置，与滚动距离比较，得到当前高亮章节id</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> offsetMap) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target.scrollTop &lt;= offsetMap[id].offsetTop) &#123;</span><br><span class="line">      highlightId = id</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> lastDom = <span class="built_in">document</span>.querySelector(<span class="string">'.highlight'</span>)</span><br><span class="line">  <span class="keyword">const</span> currentElem = <span class="built_in">document</span>.querySelector(<span class="string">`a[href="#<span class="subst">$&#123;highlightId&#125;</span>"]`</span>)</span><br><span class="line">  <span class="comment">// 修改高亮样式</span></span><br><span class="line">  <span class="keyword">if</span> (lastDom &amp;&amp; lastDom.id !== highlightId) &#123;</span><br><span class="line">    lastDom.classList.remove(<span class="string">'highlight'</span>)</span><br><span class="line">    currentElem.classList.add(<span class="string">'highlight'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    currentElem.classList.add(<span class="string">'highlight'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>功能是实现了，但这并不是最优方法，因为滚动事件的触发频率是很高的，持续调用判断函数很可能会影响渲染性能。实际上也不需要过于频繁地调用，因为当鼠标滚动 1 像素的时候，很有可能当前章节的阅读并没有发生变化。所以我们可以设置在<b style="color:red">指定一段时间内只调用一次函数，从而降低函数调用频率，这种方式我们称之为“节流”。</b></p><p>实现节流函数的过程和防抖函数有些类似，只是对于节流函数而言，有两种执行方式，在调用函数时执行最先一次调用还是最近一次调用，所以需要设置时间戳加以判断。我们可以基于 debounce() 函数加以修改，代码如下所示：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">onst throttle = <span class="function">(<span class="params">func, wait = <span class="number">0</span>, execFirstCall</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> args</span><br><span class="line">  <span class="keyword">let</span> firstCallTimestamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">throttled</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!firstCallTimestamp) firstCallTimestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="keyword">if</span> (!execFirstCall || !args) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'set args:'</span>, arg)</span><br><span class="line">      args = arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      clearTimeout(timeout)</span><br><span class="line">      timeout = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以Promise的形式返回函数执行结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span>(res, rej) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - firstCallTimestamp &gt;= wait) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = <span class="keyword">await</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">          res(result)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          rej(e)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          cancel()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timeout = setTimeout(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">            res(result)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            rej(e)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            cancel()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, firstCallTimestamp + wait - <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许取消</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeout)</span><br><span class="line">    args = <span class="literal">null</span></span><br><span class="line">    timeout = <span class="literal">null</span></span><br><span class="line">    firstCallTimestamp = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许立即执行</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cancel()</span><br><span class="line">    <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">  &#125;</span><br><span class="line">  throttled.cancel = cancel</span><br><span class="line">  throttled.flush = flush</span><br><span class="line">  <span class="keyword">return</span> throttled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><b style="color:red">节流与防抖都是通过延迟执行，减少调用次数，来优化频繁调用函数时的性能。不同的是，对于一段时间内的频繁调用，防抖是延迟执行后一次调用，节流是延迟定时多次调用。</b></p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>下面的 HTML 代码是一个简单的无序列表，现在希望点击每个项目的时候调用 getInfo() 函数，当点击“编辑”时，调用一个 edit() 函数，当点击“删除”时，调用一个 del() 函数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item1"</span>&gt;</span>项目1<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"edit"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"delete"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item2"</span>&gt;</span>项目2<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"edit"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"delete"</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">id</span>=<span class="string">"item3"</span>&gt;</span>项目3<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"edit"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"delete"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>要实现这个功能并不难，只需要对列表中每一项，分别监听 3 个元素的 click 事件即可。</p><p>但如果数据量一旦增大，事件绑定占用的内存以及执行时间将会成线性增加，而其实这些事件监听函数逻辑一致，只是参数不同而已。此时我们可以以<b>事件代理</b>或<b>事件委托</b>来进行优化。不过在此之前，我们必须先复习一下 DOM 事件的触发流程。</p><p>事件触发流程如图 1 所示，主要分为 3 个阶段：</p><ul><li>捕获，事件对象 Window 传播到目标的父对象，图 1 的红色过程；</li><li>目标，事件对象到达事件对象的事件目标，图 1 的蓝色过程；</li><li>冒泡，事件对象从目标的父节点开始传播到 Window，图 1 的绿色过程。<br><a href="https://s0.lgstatic.com/i/image/M00/0C/D6/Ciqc1F7DSJ6AEL__AAFZ8Y41LLM325.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/0C/D6/Ciqc1F7DSJ6AEL__AAFZ8Y41LLM325.png" class="lazyload" title="alt"></a></li></ul><p>例如，在下面的代码中，虽然我们第二次进行事件监听时设置为捕获阶段，但点击事件时仍会按照监听顺序进行执行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'bubble'</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'capture'</span>)</span></span><br><span class="line"><span class="actionscript">&#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 执行结果</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// buble</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// capture</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>我们再回到事件代理，事件代理的实现原理就是利用上述 DOM 事件的触发流程来对一类事件进行统一处理。比如对于上面的列表，我们在 ul 元素上绑定事件统一处理，通过得到的事件对象来获取参数，调用对应的函数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'.list'</span>)</span><br><span class="line">ul.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> t = e.target || e.srcElement</span><br><span class="line">  <span class="keyword">if</span> (t.classList.contains(<span class="string">'item'</span>)) &#123;</span><br><span class="line">    getInfo(t.id)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    id = t.parentElement.id</span><br><span class="line">    <span class="keyword">if</span> (t.classList.contains(<span class="string">'edit'</span>)) &#123;</span><br><span class="line">      edit(id)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.classList.contains(<span class="string">'delete'</span>)) &#123;</span><br><span class="line">      del(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h1 id="关于-DOM-事件标准下面-3-种事件监听方式的区别"><a href="#关于-DOM-事件标准下面-3-种事件监听方式的区别" class="headerlink" title="关于 DOM 事件标准下面 3 种事件监听方式的区别?"></a>关于 DOM 事件标准下面 3 种事件监听方式的区别?</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> onclick=<span class="string">"click()"</span>/&gt;</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).onClick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'input'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>方式 1 和方式 2 同属于 DOM0 标准，通过这种方式进行事件监会覆盖之前的事件监听函数。</p><p>方式 3 属于 DOM2 标准，推荐使用这种方式。同一元素上的事件监听函数互不影响，而且可以独立取消，调用顺序和监听顺序一致。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效操作 DOM 元素？</title>
      <link href="/2019/04/06/fornt/DOM/"/>
      <url>/2019/04/06/fornt/DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-DOM"><a href="#什么是-DOM" class="headerlink" title="什么是 DOM"></a>什么是 DOM</h1><pre><code>DOM（Document Object Model，文档对象模型）是 JavaScript 操作 HTML 的接口（这里只讨论属于前端范畴的 HTML DOM），属于前端的入门知识，同样也是核心内容，因为大部分前端功能都需要借助 DOM 来实现，比如</code></pre><blockquote><p>动态渲染列表、表格表单数据；<br>监听点击、提交事件；<br>懒加载一些脚本或样式文件；<br>实现动态展开树组件，表单组件级联等这类复杂的操作。</p></blockquote><p>   如果你查看过 DOM V3 标准，会发现包含多个内容，但归纳起来常用的主要由 3 个部分组成：</p><blockquote><p>DOM 节点<br>DOM 事件<br>选择区域</p></blockquote><h2 id="会框架更要会-DOM"><a href="#会框架更要会-DOM" class="headerlink" title="会框架更要会 DOM"></a>会框架更要会 DOM</h2><p>  有的前端工程师因为平常使用 Vue、React 这些框架比较多，觉得直接操作 DOM 的情况比较少，认为熟悉框架就行，不需要详细了解 DOM。这个观点对于初级工程师而言确实如此，能用框架写页面就算合格。<br>  但对于屏幕前想成为高级/资深前端工程师的你而言，只会使用某个框架或者能答出 DOM 相关面试题，这些肯定是不够的。恰恰相反，作为高级/资深前端工程师，不仅应该对 DOM 有深入的理解，还应该能够借此开发框架插件、修改框架甚至能写出自己的框架。<br>  因此，这一课时我们就深入了解 DOM，谈谈如何高效地操作 DOM。</p><h2 id="为什么说-DOM-操作耗时"><a href="#为什么说-DOM-操作耗时" class="headerlink" title="为什么说 DOM 操作耗时"></a>为什么说 DOM 操作耗时</h2><p>   要解释 DOM 操作带来的性能问题，我们不得不提一下浏览器的工作机制</p><h3 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h3><pre><code>如果你对浏览器结构有一定了解，就会知道浏览器包含渲染引擎（也称浏览器内核）和 JavaScript 引擎，它们都是单线程运行。单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称上下文切换。而这个操作相对而言是比较耗时的。每次 DOM 操作就会引发线程的上下文切换——从 JavaScript 引擎切换到渲染引擎执行对应操作，然后再切换回 JavaScript 引擎继续执行，这就带来了性能损耗。单次切换消耗的时间是非常少的，但是如果频繁的大量切换，那么就会产生性能问题。比如下面的测试代码，循环读取一百万次 DOM 中的 body 元素的耗时是读取 JSON 对象耗时的 10 倍。</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试次数：一百万次</span></span><br><span class="line"><span class="keyword">const</span> times = <span class="number">1000000</span></span><br><span class="line"><span class="comment">// 缓存body元素</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'object'</span>)</span><br><span class="line"><span class="keyword">let</span> body = <span class="built_in">document</span>.body</span><br><span class="line"><span class="comment">// 循环赋值对象作为对照参考</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;times;i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = body</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'object'</span>)<span class="comment">// object: 1.77197265625ms</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'dom'</span>)</span><br><span class="line"><span class="comment">// 循环读取body元素引发线程切换</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;times;i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = <span class="built_in">document</span>.body</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'dom'</span>)<span class="comment">// dom: 18.302001953125ms</span></span><br></pre></td></tr></table></figure></div><p>虽然这个例子比较极端，循环次数有些夸张，但如果在循环中包含一些复杂的逻辑或者说涉及到多个元素时，就会造成不可忽视的性能损耗。</p><h3 id="重新渲染"><a href="#重新渲染" class="headerlink" title="重新渲染"></a>重新渲染</h3><pre><code>另一个更加耗时的因素是元素及样式变化引起的再次渲染，在渲染过程中最耗时的两个步骤为重排（Reflow）与重绘（Repaint）。</code></pre><blockquote><p>浏览器在渲染页面时会将 HTML 和 CSS 分别解析成 DOM 树和 CSSOM 树，然后合并进行排布，再绘制成我们可见的页面。如果在操作 DOM 时涉及到元素、样式的修改，就会引起渲染引擎重新计算样式生成 CSSOM 树，同时还有可能触发对元素的重新排布（简称“重排”）和重新绘制（简称“重绘”）。</p></blockquote><p>可能会影响到其他元素排布的操作就会引起重排，继而引发重绘，比如：</p><ol><li>修改元素边距、大小</li><li>添加、删除元素</li><li>改变窗口大小</li></ol><p>与之相反的操作则只会引起重绘，比如：</p><ol><li><p>设置背景图片</p></li><li><p>修改字体颜色</p></li><li><p>改变 visibility 属性值</p><p>如果想了解更多关于重绘和重排的样式属性，可以参看这个网址：<a href="https://csstriggers.com/。" target="_blank" rel="noopener">https://csstriggers.com/。</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="number">100000</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;times;i++) &#123;</span><br><span class="line">  html+= <span class="string">`&lt;div&gt;<span class="subst">$&#123;i&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += html</span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(divs, (div, i) =&gt; &#123;</span><br><span class="line">  div.style.margin = i % <span class="number">2</span> ? <span class="string">'10px'</span> : <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></li></ol><p><a href="https://s0.lgstatic.com/i/image/M00/09/03/CgqCHl67pcyAWvv3AAApkJ2_V24631.png" data-fancybox="group" data-caption="miaos" class="fancybox"><img alt="miaos" data-src="https://s0.lgstatic.com/i/image/M00/09/03/CgqCHl67pcyAWvv3AAApkJ2_V24631.png" class="lazyload" title="miaos"></a></p><p>第二段代码，修改 div 元素字体颜色来触发重绘，得到渲染耗时 2359 ms。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="number">100000</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;times;i++) &#123;</span><br><span class="line">  html+= <span class="string">`&lt;div&gt;<span class="subst">$&#123;i&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += html</span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(divs, (div, i) =&gt; &#123;</span><br><span class="line">  div.style.color = i % <span class="number">2</span> ? <span class="string">'red'</span> : <span class="string">'green'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><a href="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pdqAS3FFAAAmGZWHWDs688.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pdqAS3FFAAAmGZWHWDs688.png" class="lazyload" title="alt"></a><br>从两段测试代码中可以看出，重排渲染耗时明显高于重绘，同时两者的 Painting 事件耗时接近，也应证了重排会导致重绘。</p><h2 id="如何高效操作-DOM"><a href="#如何高效操作-DOM" class="headerlink" title="如何高效操作 DOM"></a>如何高效操作 DOM</h2><h3 id="在循环外操作元素"><a href="#在循环外操作元素" class="headerlink" title="在循环外操作元素"></a>在循环外操作元素</h3><p>比如下面两段测试代码对比了读取 1000 次 JSON 对象以及访问 1000 次 body 元素的耗时差异，相差一个数量级。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="number">10000</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'switch'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.body === <span class="number">1</span> ? <span class="built_in">console</span>.log(<span class="number">1</span>) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'switch'</span>) <span class="comment">// 1.873046875ms</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">JSON</span>.stringify(<span class="built_in">document</span>.body)</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'batch'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  body === <span class="number">1</span> ? <span class="built_in">console</span>.log(<span class="number">1</span>) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'batch'</span>) <span class="comment">// 0.846923828125ms</span></span><br></pre></td></tr></table></figure></div><h3 id="批量操作元素"><a href="#批量操作元素" class="headerlink" title="批量操作元素"></a>批量操作元素</h3><p>比如说要创建 1 万个 div 元素，在循环中直接创建再添加到父元素上耗时会非常多。如果采用字符串拼接的形式，先将 1 万个 div 元素的 html 字符串拼接成一个完整字符串，然后赋值给 body 元素的 innerHTML 属性就可以明显减少耗时。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="number">10000</span>;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'createElement'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'createElement'</span>)<span class="comment">// 54.964111328125ms</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'innerHTML'</span>)</span><br><span class="line"><span class="keyword">let</span> html=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  html+=<span class="string">'&lt;div&gt;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += html <span class="comment">// 31.919921875ms</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'innerHTML'</span>)</span><br></pre></td></tr></table></figure></div><p>虽然通过修改 innerHTML 来实现批量操作的方式效率很高，但它并不是万能的。比如要在此基础上实现事件监听就会略微麻烦，只能通过事件代理或者重新选取元素再进行单独绑定。批量操作除了用在创建元素外也可以用于修改元素属性样式，比如下面的例子。</p><p>创建 2 万个 div 元素，以单节点树结构进行排布，每个元素有一个对应的序号作为文本内容。现在通过 style 属性对第 1 个 div 元素进行 2 万次样式调整。下面是直接操作 style 属性的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  html = <span class="string">`&lt;div&gt;<span class="subst">$&#123;i&#125;</span><span class="subst">$&#123;html&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += html</span><br><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  div.style.fontSize = (i % <span class="number">12</span>) + <span class="number">12</span> + <span class="string">'px'</span></span><br><span class="line">  div.style.color = i % <span class="number">2</span> ? <span class="string">'red'</span> : <span class="string">'green'</span></span><br><span class="line">  div.style.margin = (i % <span class="number">12</span>) + <span class="number">12</span> + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://s0.lgstatic.com/i/image/M00/09/04/CgqCHl67pemAQjkLAAAk8lHks5c377.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/09/04/CgqCHl67pemAQjkLAAAk8lHks5c377.png" class="lazyload" title="alt"></a><br>如果将需要修改的样式属性放入 JavaScript 数组，然后对这些修改进行 reduce 操作，得到最终需要的样式之后再设置元素属性，那么性能会提升很多。代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> times = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  html = <span class="string">`&lt;div&gt;<span class="subst">$&#123;i&#125;</span><span class="subst">$&#123;html&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += html</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = [] <span class="comment">//  创建缓存样式的数组</span></span><br><span class="line"><span class="keyword">let</span> microTask <span class="comment">// 执行修改样式的微任务</span></span><br><span class="line"><span class="keyword">const</span> st = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span><br><span class="line">  <span class="comment">// 合并样式</span></span><br><span class="line">  <span class="keyword">const</span> style = queue.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> (&#123;...acc, ...cur&#125;), &#123;&#125;)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> prop <span class="keyword">in</span> style) &#123;</span><br><span class="line">    div.style[prop] = style[prop]</span><br><span class="line">  &#125;</span><br><span class="line">  queue = []</span><br><span class="line">  microTask = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setStyle = <span class="function">(<span class="params">style</span>) =&gt;</span> &#123;</span><br><span class="line">  queue.push(style)</span><br><span class="line">  <span class="comment">// 创建微任务</span></span><br><span class="line">  <span class="keyword">if</span>(!microTask) microTask = <span class="built_in">Promise</span>.resolve().then(st)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    fontSize: (i % <span class="number">12</span>) + <span class="number">12</span> + <span class="string">'px'</span>,</span><br><span class="line">    color: i % <span class="number">2</span> ? <span class="string">'red'</span> : <span class="string">'green'</span>,</span><br><span class="line">    margin:  (i % <span class="number">12</span>) + <span class="number">12</span> + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line">  setStyle(style)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从下面的耗时占比图可以看到，紫色 Rendering 事件耗时有所减少。</p><p><a href="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67piqAR40eAAAkNcoz7jY032.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67piqAR40eAAAkNcoz7jY032.png" class="lazyload" title="alt"></a><br>virtualDOM 之所以号称高性能，其实现原理就与此类似。</p><h2 id="缓存元素集合"><a href="#缓存元素集合" class="headerlink" title="缓存元素集合"></a>缓存元素集合</h2><blockquote><p>比如将通过选择器函数获取到的 DOM 元素赋值给变量，之后通过变量操作而不是再次使用选择器函数来获取。</p></blockquote><p>下面举例说明，假设我们现在要将上面代码所创建的 1 万个 div 元素的文本内容进行修改。每次重复使用获取选择器函数来获取元素，代码以及时间消耗如下所示。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>).length; i++) &#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelectorAll(<span class="string">`div`</span>)[i].innerText = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjKAIKXfAAAlxYMHz74357.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjKAIKXfAAAlxYMHz74357.png" class="lazyload" title="alt"></a><br>如果能够将元素集合赋值给 JavaScript 变量，每次通过变量去修改元素，那么性能将会得到不小的提升。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">  divs[i].innerText = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjmAKJrEAAAjr0DG628141.png" data-fancybox="group" data-caption="alt" class="fancybox"><img alt="alt" data-src="https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjmAKJrEAAAjr0DG628141.png" class="lazyload" title="alt"></a><br>对比两者耗时占比图可以看到，两者的渲染时间较为接近。但缓存元素的方式在黄色的 Scripting 耗时上具有明显优势。</p><h3 id="还知道哪些提升渲染速度的方法和原则"><a href="#还知道哪些提升渲染速度的方法和原则" class="headerlink" title="还知道哪些提升渲染速度的方法和原则?"></a>还知道哪些提升渲染速度的方法和原则?</h3><ol><li>利用绝对定位 脱离文档流，这样操作定位里面的内容不会引起外部的重排</li><li>dom的操作进行json数据化，只操作一个根节点即可</li><li>有动画的话，也可以考虑分层渲染的机制。加上will-change</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的熟悉HTML吗？</title>
      <link href="/2019/04/02/fornt/HTML/"/>
      <url>/2019/04/02/fornt/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="前端那些看不到的标签"><a href="#前端那些看不到的标签" class="headerlink" title="前端那些看不到的标签"></a>前端那些看不到的标签</h1><pre><code>前端一些非常重要却容易被忽视的标签，这些标签大多数用在页面头部 head 标签内，虽然对用户不可见，但如果在某些场景下，比如交互实现、性能优化、搜索优化，合理利用它们就可以达到事半功倍的效果。</code></pre><h2 id="交互实现"><a href="#交互实现" class="headerlink" title="交互实现"></a>交互实现</h2><p>   在实现一个功能的时候，我们编写的代码越多，不仅开发成本越高，而且代码的健壮性也越差。提倡编码简约。</p><h3 id="meta-标签：自动刷新-跳转"><a href="#meta-标签：自动刷新-跳转" class="headerlink" title="meta 标签：自动刷新/跳转"></a>meta 标签：自动刷新/跳转</h3><pre><code>假设要实现一个类似 PPT 自动播放的效果，你很可能会想到使用 JavaScript 定时器控制页面跳转来实现。但其实有更加简洁的实现方法，比如通过 meta 标签来实现：</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Refresh"</span> content=<span class="string">"5; URL=page2.html"</span>&gt;</span><br></pre></td></tr></table></figure></div><p>  上面的代码会在 5s 之后自动跳转到同域下的 page2.html 页面。我们要实现 PPT 自动播放的功能，只需要在每个页面的 meta 标签内设置好下一个页面的地址即可。</p><p>  另一种场景，比如每隔一分钟就需要刷新页面的大屏幕监控，也可以通过 meta 标签来实现，只需去掉后面的 URL 即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Refresh"</span> content=<span class="string">"60"</span>&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p>细心的你可能会好奇，既然这样做又方便又快捷，为什么这种用法比较少见呢？一方面是因为不少前端工程师对 meta 标签用法缺乏深入了解，另一方面也是因为在使用它的时候，刷新和跳转操作是不可取消的，所以对刷新时间间隔或者需要手动取消的，还是推荐使用 JavaScript 定时器来实现。但是，如果你只是想实现页面的定时刷新或跳转（比如某些页面缺乏访问权限，在 x 秒后跳回首页这样的场景）建议你可以实践下 meta 标签的用法。</p></blockquote><h3 id="title-标签与-Hack-手段：消息提醒"><a href="#title-标签与-Hack-手段：消息提醒" class="headerlink" title="title 标签与 Hack 手段：消息提醒"></a>title 标签与 Hack 手段：消息提醒</h3><blockquote><p>作为前端工程师的你对 B/S 架构肯定不陌生，它有很多的优点，比如版本更新方便、跨平台、跨终端，但在处理某些场景，比如即时通信场景时，就会变得比较麻烦。因为前后端通信深度依赖 HTTP 协议，而 HTTP 协议采用“请求-响应”模式，这就决定了服务端也只能被动地发送数据。一种低效的解决方案是客户端通过轮询机制获取最新消息（HTML5 下可使用 WebSocket 协议）。消息提醒功能实现则比较困难，HTML5 标准发布之前，浏览器没有开放图标闪烁、弹出系统消息之类的接口，只能借助一些 Hack 的手段，比如修改 title 标签来达到类似的效果（HTML5 下可使用 Web Notifications API 弹出系统消息）。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msgNum = <span class="number">1</span> <span class="comment">// 消息条数</span></span><br><span class="line"><span class="keyword">let</span> cnt = <span class="number">0</span> <span class="comment">// 计数器</span></span><br><span class="line"><span class="keyword">const</span> inerval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cnt = (cnt + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span>(msgNum===<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过DOM修改title</span></span><br><span class="line">    <span class="built_in">document</span>.title += <span class="string">`聊天页面`</span></span><br><span class="line">    clearInterval(interval)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> prefix = cnt % <span class="number">2</span> ? <span class="string">`新消息(<span class="subst">$&#123;msgNum&#125;</span>)`</span> : <span class="string">''</span></span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`<span class="subst">$&#123;prefix&#125;</span>聊天页面`</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></div><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote><p>性能优化是前端开发中避不开的问题，性能问题无外乎两方面原因：渲染速度慢、请求时间长。性能优化虽然涉及很多复杂的原因和解决方案，但其实只要通过合理地使用标签，就可以在一定程度上提升渲染速度以及减少请求时间。</p></blockquote><h3 id="script-标签：调整加载顺序提升渲染速度"><a href="#script-标签：调整加载顺序提升渲染速度" class="headerlink" title="script 标签：调整加载顺序提升渲染速度"></a>script 标签：调整加载顺序提升渲染速度</h3><blockquote><p>由于浏览器的底层运行机制，渲染引擎在解析 HTML 时，若遇到 script 标签引用文件，则会暂停解析过程，同时通知网络线程加载文件，文件加载后会切换至 JavaScript 引擎来执行对应代码，代码执行完成之后切换至渲染引擎继续渲染页面。在这一过程中可以看到，页面渲染过程中包含了请求文件以及执行文件的时间，但页面的首次渲染可能并不依赖这些文件，这些请求和执行文件的动作反而延长了用户看到页面的时间，从而降低了用户体验。为了减少这些时间损耗，可以借助 script 标签的 3 个属性来实现。</p></blockquote><ol><li>async 属性。立即请求文件，但不阻塞渲染引擎，而是文件加载完毕后阻塞渲染引擎并立即执行文件内容。</li><li>defer 属性。立即请求文件，但不阻塞渲染引擎，等到解析完 HTML 之后再执行文件内容。</li><li>HTML5 标准 type 属性，对应值为“module”。让浏览器按照 ECMA Script 6 标准将文件当作模块进行解析，默认阻塞效果同 defer，也可以配合 async 在请求完成后立即执行。</li></ol><h3 id="link-标签：通过预处理提升渲染速度"><a href="#link-标签：通过预处理提升渲染速度" class="headerlink" title="link 标签：通过预处理提升渲染速度"></a>link 标签：通过预处理提升渲染速度</h3><blockquote><p>在我们对大型单页应用进行性能优化时，也许会用到按需懒加载的方式，来加载对应的模块，但如果能合理利用 link 标签的 rel 属性值来进行预加载，就能进一步提升渲染速度。 dns-prefetch。当 link 标签的 rel 属性值为“dns-prefetch”时，浏览器会对某个域名预先进行 DNS 解析并缓存。这样，当浏览器在请求同域名资源的时候，能省去从域名查询 IP 的过程，从而减少时间损耗。</p></blockquote><ol><li>preconnect。让浏览器在一个 HTTP 请求正式发给服务器前预先执行一些操作，这包括 DNS 解析、TLS 协商、TCP 握手，通过消除往返延迟来为用户节省时间。</li><li>prefetch/preload。两个值都是让浏览器预先下载并缓存某个资源</li><li>prefetch 可能会在浏览器忙时被忽略，而 preload 则是一定会被预先下载。</li><li>prerender。浏览器不仅会加载资源，还会解析执行页面，进行预渲染。</li></ol><h3 id="搜索优化"><a href="#搜索优化" class="headerlink" title="搜索优化"></a>搜索优化</h3><p>你所写的前端代码，除了要让浏览器更好执行，有时候也要考虑更方便其他程序（如搜索引擎）理解。合理地使用 meta 标签和 link 标签，恰好能让搜索引擎更好地理解和收录我们的页面。</p><p>meta 标签：提取关键信息<br>通过 meta 标签可以设置页面的描述信息，从而让搜索引擎更好地展示搜索结果。</p><p>例如，在百度中搜索“前端”，就会发现网站的描述信息，这些描述信息就是通过 meta 标签专门为搜索引擎设置的，目的是方便用户预览搜索到的结果。</p><p>为了让搜索引擎更好地识别页面，除了描述信息之外还可以使用关键字，这样即使页面其他地方没有包含搜索内容，也可以被搜索到（当然搜索引擎有自己的权重和算法，如果滥用关键字是会被降权的，比如 Google 引擎就会对堆砌大量相同关键词的网页进行惩罚，降低它被搜索到的权重）。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content=&quot;拉勾,拉勾网,拉勾招聘,拉钩, 拉钩网 ,互联网招聘,拉勾互联网招聘, 移动互联网招聘, 垂直互联网招聘, 微信招聘, 微博招聘, 拉勾官网, 拉勾百科,跳槽, 高薪职位, 互联网圈子, IT招聘, 职场招聘, 猎头招聘,O2O招聘, LBS招聘, 社交招聘, 校园招聘, 校招,社会招聘,社招&quot; name=&quot;keywords&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>在实际工作中，推荐使用一些关键字工具来挑选，比如 Google Trends、站长工具。下图是我使用站长工具搜索“招聘”关键字得到的结果，可以看到得到了相当关键的一些信息，比如全网搜索指数、关键词特点。</p><h3 id="link-标签：减少重复"><a href="#link-标签：减少重复" class="headerlink" title="link 标签：减少重复"></a>link 标签：减少重复</h3><p>有时候为了用户访问方便或者出于历史原因，对于同一个页面会有多个网址，又或者存在某些重定向页面，比如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://xx.com/a.html</span><br><span class="line">https://xx.com/detail?id=&quot;abcd&quot;</span><br><span class="line"></span><br><span class="line">&lt;link href=&quot;https://xx.com/a.html&quot; rel=&quot;canonical&quot;&gt;</span><br></pre></td></tr></table></figure></div><p>这样可以让搜索引擎避免花费时间抓取重复网页。不过需要注意的是，它还有个限制条件，那就是指向的网站不允许跨域。</p><p>当然，要合并网址还有其他的方式，比如使用站点地图，或者在 HTTP 请求响应头部添加 rel=”canonical”</p><h3 id="OGP（开放图表协议）"><a href="#OGP（开放图表协议）" class="headerlink" title="OGP（开放图表协议）"></a>OGP（开放图表协议）</h3><p>OGP 是 Facebook 公司在 2010 年提出的，目的是通过增加文档信息来提升社交网页在被分享时的预览效果。你只需要在一些分享页面中添加一些 meta 标签及属性，支持 OGP 协议的社交网站就会在解析页面时生成丰富的预览信息，比如站点名称、网页作者、预览图片。具体预览效果会因各个网站而有所变化。</p><p>下面是微信文章支持 OGP 协议的代码，可以看到通过 meta 标签属性值声明了：网址、预览图片、描述信息、站点名称、网页类型和作者信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![1583480543843-477274458e5be00b.png](https://zos.alipayobjects.com/rmsportal/VTcUYAaoKqXyHJbLAPyF.svg)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="/2019/03/15/essays/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2019/03/15/essays/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h1><pre><code>模块化是指将一个复杂的系统分解为多个模块以方便编码。当项目变得越来越大的时候，原来的引入方式会越来越臃肿，难以维护。所以在这里需要用模块化的思想来组织代码。目前流行的 前端模块化规范有 CommonJs、AMD、CMD、ES6</code></pre><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><pre><code>CommonJs 是一种被广泛使用的 JavaScript 模块化规范，其核心思想是通过 require 方法来同步加载依赖的其他模块，通过 module.exports 导出需要暴露的接口。它的流行得益于 Node.js 采用了这种方式，后来这种方式就被引入到了 网页开发之中。</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    add,</span><br><span class="line">    num1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入自定义的模块时，参数包含路径，可省略.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'./modul_demo'</span>);</span><br><span class="line">moduleA.add(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 node 中，引用其核心模块，则不需要带路径</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">'./modul_demo.js'</span>);</span><br><span class="line">data.toString();</span><br></pre></td></tr></table></figure></div><ol><li>特点<br>commonJS用同步的方式加载模块，在服务端，模块文件都存在本地磁盘，读取很快，但在浏览器端因为网络等原因，最好的方式应该需要进行异步加载；因为是同步加载，所以只有加载完成，才能执行后面的操作；在服务器端，模块的加载是运行直接可以运行的；在浏览器端，模块需要提前编译打包处理。</li><li>机制<br>CommonJS 模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">'./lib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.counter);  <span class="comment">// 3</span></span><br><span class="line">mod.incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></div><blockquote><p>上面的代码说明，lib.js 模块加载完了之后，它的内部变化就影响不到输出的 mod.counter 了。这是因为 mod.counter 是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">get</span> counter() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.counter);  <span class="comment">// 3</span></span><br><span class="line">mod.incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">//  4</span></span><br></pre></td></tr></table></figure></div><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><blockquote><p>AMD 也是一种 JavaScript 模块化规范，与 CommonJS 最大的不同在于，他采用了异步的方式去加载依赖的模块。它主要解决针对浏览器环境的模块化问题，因为浏览器环境有可能会因为网络的原因，需要从服务器加载数据，那么这里就需要采用非同步的模式。最具代表性的实现是 require.js。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line">define([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入使用模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 使用m1、m2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ol><li>特点<br>可以直接在浏览器中运行，可以异步加载依赖，并可以同时加载多个依赖，避免页面失去响应；定义模块的方法很清晰，不会污染全局环境，能够清晰的显示依赖关系。但是Javascript 运行环境没有原生支持 AMD，需要先导入实现了 AMD 的库后才能正常使用。</li></ol><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><blockquote><p>CMD规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。它整合了 CommonJS和AMD规范的特点最具代表性的是 Sea.js</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义没有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">  exports.xxx = value</span><br><span class="line">  <span class="built_in">module</span>.exports = value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//引入依赖模块(同步)</span></span><br><span class="line">  <span class="keyword">var</span> module2 = <span class="built_in">require</span>(<span class="string">'./module2'</span>)</span><br><span class="line">  <span class="comment">//引入依赖模块(异步)</span></span><br><span class="line">  <span class="built_in">require</span>.async(<span class="string">'./module3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m3</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//暴露模块</span></span><br><span class="line">  exports.xxx = value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入使用模块：</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="built_in">require</span>(<span class="string">'./module1'</span>)</span><br><span class="line">  <span class="keyword">var</span> m4 = <span class="built_in">require</span>(<span class="string">'./module4'</span>)</span><br><span class="line">  m1.show()</span><br><span class="line">  m4.show()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h2><blockquote><p>ES6 模块化是国际标准化组织 ECMA 提出的 JavaScript 模块化 规范，它在语言层面上实现了模块化。浏览器厂商和 Node.js 都说要原生支持该规范。他将取代 CommonJs 和 Amd 规范，成为浏览器和服务器通用的模块解决方案。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol><li>缺点<br>代码无法直接运行在 大部分的 Javascript 运行环境之下，必须通过一些工具转化为浏览器能运行的 ES5</li></ol><h2 id="ES6-与-CommonJs的差异"><a href="#ES6-与-CommonJs的差异" class="headerlink" title="ES6 与 CommonJs的差异"></a>ES6 与 CommonJs的差异</h2><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。<blockquote><p>CommonJs 在上文中已经进行分析过，ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p></blockquote></li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。<blockquote><p>因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p></blockquote></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js混淆工具-- JavaScript Obfuscator</title>
      <link href="/2019/03/10/essays/js-obfuscator/"/>
      <url>/2019/03/10/essays/js-obfuscator/</url>
      
        <content type="html"><![CDATA[<h2 id="混淆工具javascript-obfuscator使用简介"><a href="#混淆工具javascript-obfuscator使用简介" class="headerlink" title="混淆工具javascript-obfuscator使用简介"></a>混淆工具javascript-obfuscator使用简介</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install javascript-obfuscator -g</span><br></pre></td></tr></table></figure></div><h2 id="安装完成后，javascript-obfuscator就是一个独立的可执行命令了。"><a href="#安装完成后，javascript-obfuscator就是一个独立的可执行命令了。" class="headerlink" title="安装完成后，javascript-obfuscator就是一个独立的可执行命令了。"></a>安装完成后，javascript-obfuscator就是一个独立的可执行命令了。</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript-obfuscator -v</span><br></pre></td></tr></table></figure></div><ul><li>可以查看版本号，检测安装是否成功。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript-obfuscator a.js</span><br></pre></td></tr></table></figure></div><blockquote><p>上面命令表示，使用默认配置对 a.js 执行混淆，结果输出到默认文件 a-obfuscated.js。<br>也可以根据需求修改配置，从而调整混淆强度。主要有以下几个重要参数。</p></blockquote><h2 id="controlFlowFlattening"><a href="#controlFlowFlattening" class="headerlink" title="controlFlowFlattening"></a>controlFlowFlattening</h2><blockquote><p>默认 false。设为 true，表示开启代码控制流展平，这是源代码的一种结构转换，使代码增大且变得难以理解。</p></blockquote><h2 id="controlFlowFlatteningThreshold"><a href="#controlFlowFlatteningThreshold" class="headerlink" title="controlFlowFlatteningThreshold"></a>controlFlowFlatteningThreshold</h2><blockquote><p>和 controlFlowFlattening配合，表示代码控制流展平的概率，此设置对于大代码影响较大，大量的控制流转换会减慢代码速度并增加代码大小。controlFlowFlatteningThreshold的值范围是从0到1，如果为0等同于 controlFlowFlattening为false。</p></blockquote><h2 id="deadCodeInjection"><a href="#deadCodeInjection" class="headerlink" title="deadCodeInjection"></a>deadCodeInjection</h2><blockquote><p>默认false。设为true，表示将添加随机废代码到被混淆代码中。</p></blockquote><ul><li>该选项会显著增加代码大小（高达200%）</li></ul><h2 id="deadCodeInjectionThreshold"><a href="#deadCodeInjectionThreshold" class="headerlink" title="deadCodeInjectionThreshold"></a>deadCodeInjectionThreshold</h2><blockquote><p>设置废代码注入的百分比。值范围是从0到1，如果为0等同于 deadCodeInjection为false。</p></blockquote><ul><li>此选项强制启用stringArray选项。</li></ul><h2 id="stringArray"><a href="#stringArray" class="headerlink" title="stringArray"></a>stringArray</h2><blockquote><p>删除字符串文字并将其放置在特殊数组中。例如，var m=“Hello World”中的字符串“Hello World”，将被替换为var m=x12c456[0x1]；</p></blockquote><h2 id="stringArrayEncoding"><a href="#stringArrayEncoding" class="headerlink" title="stringArrayEncoding"></a>stringArrayEncoding</h2><blockquote><p>使用 base64或 rc4对stringArray影响的所有字符串文本进行编码，并插入用于在运行时对其进行解码的特殊代码。</p></blockquote><ul><li>此选项会减慢脚本的速度。</li></ul><h2 id="stringArrayThreshold"><a href="#stringArrayThreshold" class="headerlink" title="stringArrayThreshold"></a>stringArrayThreshold</h2><blockquote><p>此设置调整将字符串文本插入stringArray的概率（从0到1）</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>一个中等混淆强度的配置选项如下，它会使性能降低约30-50%，代码体积增加约300%。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compact"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"controlFlowFlattening"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"controlFlowFlatteningThreshold"</span>: <span class="number">0.75</span>,</span><br><span class="line">    <span class="attr">"deadCodeInjection"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"deadCodeInjectionThreshold"</span>: <span class="number">0.4</span>,</span><br><span class="line">    <span class="attr">"debugProtection"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"debugProtectionInterval"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"disableConsoleOutput"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"identifierNamesGenerator"</span>: <span class="string">"hexadecimal"</span>,</span><br><span class="line">    <span class="attr">"log"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"renameGlobals"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"rotateStringArray"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"selfDefending"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"stringArray"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"stringArrayEncoding"</span>: <span class="string">"base64"</span>,</span><br><span class="line">    <span class="attr">"stringArrayThreshold"</span>: <span class="number">0.75</span>,</span><br><span class="line">    <span class="attr">"unicodeEscapeSequence"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><p>将上述配置选项，保存为文件 config.json，并指定输出结果到 b.js，输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript-obfuscator a.js --config test.json --output b.js</span><br></pre></td></tr></table></figure></div></li><li><p>上面命令表示， javascript-obfuscator将会使用config.json指定的配置，对 a.js 执行混淆，结果输出到 b.js。</p></li></ul><h2 id="在线js-混淆工具"><a href="#在线js-混淆工具" class="headerlink" title="在线js 混淆工具"></a><a href="https://obfuscator.io/" target="_blank" rel="noopener">在线js 混淆工具</a></h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效查找开源项目-github</title>
      <link href="/2019/02/15/essays/%E9%AB%98%E6%95%88%E6%9F%A5%E6%89%BE%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-github/"/>
      <url>/2019/02/15/essays/%E9%AB%98%E6%95%88%E6%9F%A5%E6%89%BE%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-github/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索的使用技巧"><a href="#搜索的使用技巧" class="headerlink" title="搜索的使用技巧"></a>搜索的使用技巧</h1><h2 id="搜索精确搜索"><a href="#搜索精确搜索" class="headerlink" title="搜索精确搜索"></a>搜索精确搜索</h2><table><thead><tr><th align="left">语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">in:name xxx</td><td align="left">按照项目名称查找</td></tr><tr><td align="left">in:readme xxx</td><td align="left">按照项目readme文件查找</td></tr><tr><td align="left">in:description xxx</td><td align="left">按照项目描述查找</td></tr><tr><td align="left">language xxx</td><td align="left">按照项目开发语言查找</td></tr><tr><td align="left">pushed: 2019-09-01</td><td align="left">按照项目最后一次推送时间过滤</td></tr><tr><td align="left">forks:&gt;100</td><td align="left">根据fork过滤条件</td></tr><tr><td align="left">stars:&gt;100</td><td align="left">根据点赞过滤条件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-自定义appBar定义顶部Tab切换</title>
      <link href="/2019/02/15/Flutter/appBer/"/>
      <url>/2019/02/15/Flutter/appBer/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-appbar"><a href="#Flutter布局-appbar" class="headerlink" title="Flutter布局-appbar"></a>Flutter布局-appbar</h1><h2 id="appbar组件的常用属性"><a href="#appbar组件的常用属性" class="headerlink" title="appbar组件的常用属性"></a>appbar组件的常用属性</h2><table><thead><tr><th align="left">属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">leading</td><td align="left">在标题前面显示一个控件，在首页通常显示应用的logo；在其他界面显示为返回按钮</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">actions</td><td align="left">通常使用iconButton来表示，可以放按钮组</td></tr><tr><td align="left">bottom</td><td align="left">通常放tabbar，标题下面实现tab导航栏</td></tr><tr><td align="left">backgroundColor</td><td align="left">导航背景颜色</td></tr><tr><td align="left">iconTheme</td><td align="left">图标样式</td></tr><tr><td align="left">textTheme</td><td align="left">文字样式</td></tr><tr><td align="left">centerTitle</td><td align="left">标题是否居中显示</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  appBar: AppBar(</span><br><span class="line">    leading: IconButton(</span><br><span class="line">        icon: Icon(Icons.menu),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">'111'</span>);</span><br><span class="line">        &#125;),</span><br><span class="line">    backgroundColor: Colors.red,</span><br><span class="line">    title: Text(<span class="string">'title'</span>),</span><br><span class="line">    actions: &lt;Widget&gt;[</span><br><span class="line">      IconButton(</span><br><span class="line">          icon: Icon(Icons.menu),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'222'</span>);</span><br><span class="line">          &#125;),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><h2 id="自定义appBar定义顶部Tab切换"><a href="#自定义appBar定义顶部Tab切换" class="headerlink" title="自定义appBar定义顶部Tab切换"></a>自定义appBar定义顶部Tab切换</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">DefaultTabController(</span><br><span class="line">      length: <span class="number">2</span>,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          bottom: TabBar(tabs: &lt;Widget&gt;[</span><br><span class="line">            Tab(</span><br><span class="line">              text: <span class="string">"热门"</span>,</span><br><span class="line">            ),</span><br><span class="line">            Tab(</span><br><span class="line">              text: <span class="string">"热门"</span>,</span><br><span class="line">            ),</span><br><span class="line">          ]),</span><br><span class="line">        ),</span><br><span class="line">        body: TabBarView(children: &lt;Widget&gt;[</span><br><span class="line">          ListView(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">'xx'</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">'xx'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          ListView(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">'qq'</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">'qq'</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ]),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-路由管理</title>
      <link href="/2019/02/14/Flutter/flutter_route/"/>
      <url>/2019/02/14/Flutter/flutter_route/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter路由管理"><a href="#Flutter路由管理" class="headerlink" title="Flutter路由管理"></a>Flutter路由管理</h1><pre><code>路由(Route)在移动开发中通常指页面（Page），这跟web开发中单页应用的Route概念意义是相同的，所谓路由管理，就是管理页面之间如何跳转，通常也可被称为导航管理。Flutter中的路由管理和原生开发类似，无论是Android还是iOS，导航管理都会维护一个路由栈，路由入栈(push)操作对应打开一个新页面，路由出栈(pop)操作对应页面关闭操作，而路由管理主要是指如何来管理路由栈。</code></pre><h2 id="MaterialPageRoute"><a href="#MaterialPageRoute" class="headerlink" title="MaterialPageRoute"></a>MaterialPageRoute</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MaterialPageRoute(&#123;</span><br><span class="line">  WidgetBuilder builder,</span><br><span class="line">  RouteSettings settings,</span><br><span class="line">  <span class="built_in">bool</span> maintainState = <span class="keyword">true</span>,</span><br><span class="line">  <span class="built_in">bool</span> fullscreenDialog = <span class="keyword">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><blockquote><ol><li>builder 是一个WidgetBuilder类型的回调函数，它的作用是构建路由页面的具体内容，返回值是一个widget。我们通常要实现此回调，返回新路由的实例。</li><li>settings 包含路由的配置信息，如路由名称、是否初始路由（首页）。</li><li>maintainState：默认情况下，当入栈一个新路由时，原来的路由仍然会被保存在内存中，如果想在路由没用的时候释放其所占用的所有资源，可以设置maintainState为false。</li><li>fullscreenDialog表示新的路由页面是否是一个全屏的模态对话框，在iOS中，如果fullscreenDialog为true，新页面将会从屏幕底部滑入（而不是水平方向）。</li></ol></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li><p>创建一个新路由，命名“NewRoute”</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"New route"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">"This is new route"</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>再 HomeWidget 中添加一个按钮</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()=&gt;runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">"demo1"</span>,</span><br><span class="line">      home: HomeWidget()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>   <span class="keyword">new</span> Scaffold(</span><br><span class="line">      appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">        title: <span class="keyword">new</span> Text(<span class="string">"title"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">new</span> Container(</span><br><span class="line">        margin: EdgeInsets.all(<span class="number">20.0</span>),</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">             FlatButton(</span><br><span class="line">              child: Text(<span class="string">"open new route"</span>),</span><br><span class="line">              textColor: Colors.blue[<span class="number">400</span>],</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.push(</span><br><span class="line">                    context, MaterialPageRoute(</span><br><span class="line">                    builder: (context) &#123;<span class="keyword">return</span> NewRoute();&#125;,</span><br><span class="line">                    maintainState: <span class="keyword">false</span>,</span><br><span class="line">                    fullscreenDialog: <span class="keyword">false</span></span><br><span class="line">                ));</span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><pre><code>Navigator是一个路由管理的组件，它提供了打开和退出路由页方法。Navigator通过一个栈来管理活动路由集合。通常当前屏幕显示的页面就是栈顶的路由。Navigator提供了一系列方法来管理路由栈</code></pre><ul><li>push(BuildContext context, Route route)<br>  将给定的路由入栈（即打开新的页面），返回值是一个Future对象，用以接收新路由出栈（即关闭）时的返回数据。</li><li>pop(BuildContext context, [ result ])<br>  将栈顶路由出栈，result为页面关闭时返回给上一个页面的数据。<blockquote><p>Navigator 还有很多其它方法，如Navigator.replace、Navigator.popUntil等，详情请参考API文档或SDK源码注释，在此不再赘述。</p></blockquote></li></ul><h2 id="路由传值"><a href="#路由传值" class="headerlink" title="路由传值"></a>路由传值</h2><pre><code>很多时候，在路由跳转时我们需要带一些参数，比如打开商品详情页时，我们需要带一个商品id，这样商品详情页才知道展示哪个商品信息；又比如我们在填写订单时需要选择收货地址，打开地址选择页并选择地址后，可以将用户选择的地址返回到订单页等等。下面我们通过一个简单的示例来演示新旧路由如何传参</code></pre><ul><li><p>新建一个子页面</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TipRoutr</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  TipRoutr(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text,</span><br><span class="line">&#125;):<span class="keyword">super</span>(key:key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"tishi"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"text"</span>),</span><br><span class="line">              RaisedButton(</span><br><span class="line">                onPressed: ()=&gt;Navigator.pop(context,<span class="string">'我是返回值'</span>),</span><br><span class="line">                child: Text(<span class="string">"返回"</span>),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>新建一个父页面</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_app1/router_Demo/TipRoute.dart'</span>;</span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(MyApp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'123'</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">"123"</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: RouterTestRoute(),</span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(colorScheme: ColorScheme.light(background: Colors.redAccent)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: RaisedButton(</span><br><span class="line">        onPressed: () <span class="keyword">async</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.push(context, MaterialPageRoute(</span><br><span class="line">            builder: (context)&#123;</span><br><span class="line">              <span class="keyword">return</span> TipRoutr(</span><br><span class="line">                text: <span class="string">"woshi tishi"</span>,</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          );</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"luyou <span class="subst">$result</span>"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">"open Tip"</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><ol><li>提示文案“我是提示xxxx”是通过TipRoute的text参数传递给新路由页的。我们可以通过等待Navigator.push(…)返回的Future来获取新路由的返回数据。</li><li>在TipRoute页中有两种方式可以返回到上一页；第一种方式时直接点击导航栏返回箭头，第二种方式是点击页面中的“返回”按钮。这两种返回方式的区别是前者不会返回数据给上一个路由，而后者会。下面是分别点击页面中的返回按钮和导航栏返回箭头后，RouterTestRoute页中print方法在控制台输出的内容：</li></ol></blockquote><pre><code>I/flutter (27896): 路由返回值: 我是返回值I/flutter (27896): 路由返回值: null</code></pre><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><pre><code>谓“命名路由”（Named Route）即有名字的路由，我们可以先给路由起一个名字，然后就可以通过路由名字直接打开新的路由了，这为路由管理带来了一种直观、简单的方式。</code></pre><ol><li><p>定义routes</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'pages3-22/DefaultPage.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'pages3-22/HomePage.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'pages3-22/ListPage.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'pages3-22/MePage.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'pages3-22/SearchPage.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: MyApp(),</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">"/HomePage"</span>: (context) =&gt; HomePage(),</span><br><span class="line">        <span class="string">"/DefaultPage"</span>: (context) =&gt; DefaultPage(),</span><br><span class="line">        <span class="string">"/ListPage"</span>: (context) =&gt; ListPage(),</span><br><span class="line">        <span class="string">"/MePage"</span>: (context) =&gt; MePage(),</span><br><span class="line">        <span class="string">"/Search"</span>: (context) =&gt; SearchPage(),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在页面写跳转按钮</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomePage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          RaisedButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              <span class="comment">// 命名路由的跳转方式</span></span><br><span class="line">              Navigator.pushNamed(context, <span class="string">"/Search"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">"跳转到search页面并且传递id"</span>),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>跳转的页面</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"package:flutter/material.dart"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"查询页面"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Text(<span class="string">"SearchPage"</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="命名路由传参"><a href="#命名路由传参" class="headerlink" title="命名路由传参"></a>命名路由传参</h2><blockquote><p>待更！</p></blockquote><h2 id="路由替换"><a href="#路由替换" class="headerlink" title="路由替换"></a>路由替换</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.pushReplacementNamed(context,<span class="string">'/routerName'</span>);</span><br></pre></td></tr></table></figure></div><h2 id="返回到上一个页面"><a href="#返回到上一个页面" class="headerlink" title="返回到上一个页面"></a>返回到上一个页面</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop();</span><br></pre></td></tr></table></figure></div><h2 id="返回到根页面"><a href="#返回到根页面" class="headerlink" title="返回到根页面"></a>返回到根页面</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushAndRemoveUntil(</span><br><span class="line">  <span class="keyword">new</span> MaterialPageRoute(builder:(context)=&gt;RouterName()),</span><br><span class="line">  (route)=&gt;route==<span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-BottomNavigationBar 自定义底部导航条，以及实现页面切换</title>
      <link href="/2019/02/14/Flutter/BottomNavigationBar/"/>
      <url>/2019/02/14/Flutter/BottomNavigationBar/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-BottomNavigationBar组件"><a href="#Flutter布局-BottomNavigationBar组件" class="headerlink" title="Flutter布局-BottomNavigationBar组件"></a>Flutter布局-BottomNavigationBar组件</h1><blockquote><p>BottomNavigationBar是底部导航条，可以让我们定义底部tab切换，BottomNavigationBar是Scaffold组件的参数。</p></blockquote><h2 id="BottomNavigationBar组件的常用属性"><a href="#BottomNavigationBar组件的常用属性" class="headerlink" title="BottomNavigationBar组件的常用属性"></a>BottomNavigationBar组件的常用属性</h2><table><thead><tr><th align="left">属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">items</td><td align="left">List&lt;BottomNavigationBar&gt; 底部导航按钮集合</td></tr><tr><td align="left">iconSize</td><td align="left">icon</td></tr><tr><td align="left">currentIndex</td><td align="left">默认选中第几个</td></tr><tr><td align="left">onTap</td><td align="left">选中变换回调函数</td></tr><tr><td align="left">fixedColor</td><td align="left">选中的颜色</td></tr><tr><td align="left">type</td><td align="left">BottomNavigationBarType.fixed (当底部导航栏items&gt;3的时候必须设置此属性)</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./data/listData.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">"有状态组件"</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: HomePage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  HomePage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> countNum = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        SizedBox(</span><br><span class="line">          height: <span class="number">200.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        Text(<span class="string">"nihao<span class="subst">$&#123;<span class="keyword">this</span>.countNum&#125;</span>"</span>),</span><br><span class="line">        SizedBox(</span><br><span class="line">          height: <span class="number">20.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        RaisedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              <span class="keyword">this</span>.countNum++;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">this</span>.countNum);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Text(<span class="string">"buttom"</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-StatefulWidget 有状态组件</title>
      <link href="/2019/02/14/Flutter/StatefulWidget/"/>
      <url>/2019/02/14/Flutter/StatefulWidget/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-StatefulWidget组件"><a href="#Flutter布局-StatefulWidget组件" class="headerlink" title="Flutter布局-StatefulWidget组件"></a>Flutter布局-StatefulWidget组件</h1><blockquote><ol><li>在flutter中自定义一个组件其实就是一个类。这个类需要继承StatelessWidget/StatefulWidget.</li><li>StatefulWidget组件 有状态组件。持有的状态可能再widget生命周期改变。如果我们想改变页面中的数据的话就需要是用有状态的组件</li></ol></blockquote><blockquote><p>我们使用Widgets构建UI，这些widgets有两种类型，stateful和stateless，由于整个APP全部使用widget构建，所以在构建每个widget时，都需要判断使用哪种状态，这就要求必须对状态有深入了解，才能确保每个决定都是准确无误的。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./data/listData.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">"有状态组件"</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: HomePage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  HomePage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> countNum = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        SizedBox(</span><br><span class="line">          height: <span class="number">200.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        Text(<span class="string">"nihao<span class="subst">$&#123;<span class="keyword">this</span>.countNum&#125;</span>"</span>),</span><br><span class="line">        SizedBox(</span><br><span class="line">          height: <span class="number">20.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        RaisedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              <span class="keyword">this</span>.countNum++;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">this</span>.countNum);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Text(<span class="string">"buttom"</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-AspectRatio组件，card组件,wrap组件</title>
      <link href="/2019/02/13/Flutter/AspectRatio/"/>
      <url>/2019/02/13/Flutter/AspectRatio/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-AspectRatio组件"><a href="#Flutter布局-AspectRatio组件" class="headerlink" title="Flutter布局-AspectRatio组件"></a>Flutter布局-AspectRatio组件</h1><blockquote><p>AspectRatio的作用是根据设置调整子元素child的宽高比</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">AspectRatio</td><td align="left">宽高比，最终可能不会根据这个值去布局，具体则要看综合因素。外层是否允许按照这种比率进行布局，这只是一个参考值</td></tr><tr><td align="center">child</td><td align="left">子组件</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AspectRatio(</span><br><span class="line">      aspectRatio: <span class="number">2.0</span> / <span class="number">1.0</span>,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Card-组件"><a href="#Flutter布局-Card-组件" class="headerlink" title="Flutter布局-Card 组件"></a>Flutter布局-Card 组件</h1><blockquote><p>card 默认右圆角和阴影，让啊看起来有立体感</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">margin</td><td align="left">外边距</td></tr><tr><td align="center">child</td><td align="left">子组件</td></tr><tr><td align="center">Shape</td><td align="left">Card的阴影效果，默认的阴影效果为圆角的长方形边</td></tr><tr><td align="center">elevation</td><td align="left">Card的阴影范围</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Card(</span><br><span class="line">   margin: EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">   elevation: <span class="number">2.0</span>,</span><br><span class="line">   shape: <span class="keyword">const</span> RoundedRectangleBorder(</span><br><span class="line">     borderRadius: BorderRadius.all(Radius.circular(<span class="number">14.0</span>)),</span><br><span class="line">   ),</span><br><span class="line">   child: Column(</span><br><span class="line">     children: &lt;Widget&gt;[</span><br><span class="line">       Text(<span class="string">'qwe'</span>),</span><br><span class="line">       Text(<span class="string">'qwe'</span>),</span><br><span class="line">     ],</span><br><span class="line">   ),</span><br><span class="line"> ),</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-wrap组件"><a href="#Flutter布局-wrap组件" class="headerlink" title="Flutter布局-wrap组件"></a>Flutter布局-wrap组件</h1><blockquote><p>wrap可以实现流布局，x轴空间不足时，则换行显示</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">direction</td><td align="left">主轴的方向，默认水平</td></tr><tr><td align="center">alignment</td><td align="left">主轴的对齐方式</td></tr><tr><td align="center">spacing</td><td align="left">主轴方向上的间距</td></tr><tr><td align="center">runSpacing</td><td align="left">run的间距</td></tr><tr><td align="center">textDirection</td><td align="left">文本方向</td></tr><tr><td align="center">verticalDirection</td><td align="left">定义了children拜访顺序，默认是down，见flex相关属性介绍</td></tr><tr><td align="center">runAlignment</td><td align="left">run的对齐方式。run可以理解为新的行或者列，如果是水平方向布局的话，run可以理解为新的一行</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWrap</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Wrap(</span><br><span class="line">      runSpacing: <span class="number">10</span>,</span><br><span class="line">      spacing: <span class="number">10</span>,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">        MyButton(<span class="string">'1111'</span>),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line">  <span class="keyword">const</span> MyButton(<span class="keyword">this</span>.text, &#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> RaisedButton(</span><br><span class="line">      textColor: Theme.of(context).accentColor,</span><br><span class="line">      onPressed: () &#123;&#125;,</span><br><span class="line">      child: Text(<span class="string">'xxx'</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-Stack与Align  Stack与Postioned组件实现定位布局</title>
      <link href="/2019/02/13/Flutter/StackAlignPosition/"/>
      <url>/2019/02/13/Flutter/StackAlignPosition/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-Stack组件"><a href="#Flutter布局-Stack组件" class="headerlink" title="Flutter布局-Stack组件"></a>Flutter布局-Stack组件</h1><blockquote><p>Stack表示堆的意思，我们可以用Stack或者Stack结合Align或者Stack结合Position来实现页面的定位布局。</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">alignment</td><td align="left">配置所有子元素的显示位置</td></tr><tr><td align="center">children</td><td align="left">子组件</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Stack(</span><br><span class="line">    alignment: Alignment.center,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Container(</span><br><span class="line">        height: <span class="number">400</span>,</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      Text(<span class="string">"woshi wenben"</span>),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Stack-Align"><a href="#Flutter布局-Stack-Align" class="headerlink" title="Flutter布局-Stack Align"></a>Flutter布局-Stack Align</h1><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">alignment</td><td align="left">配置所有子元素的显示位置</td></tr><tr><td align="center">child</td><td align="left">子组件</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Stack(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Align(</span><br><span class="line">        alignment: Alignment(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">        child: Icon(Icons.home, size: <span class="number">40</span>, color: Colors.white),</span><br><span class="line">      ),</span><br><span class="line">      </span><br><span class="line">      Align(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        child: Icon(Icons.cached, size: <span class="number">60</span>, color: Colors.white),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Stack-Positioned"><a href="#Flutter布局-Stack-Positioned" class="headerlink" title="Flutter布局-Stack Positioned"></a>Flutter布局-Stack Positioned</h1><blockquote><p>Stack和Positioned 组件控制每个子元素的显示位置</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">top</td><td align="left">子元素距离顶部的距离</td></tr><tr><td align="center">left</td><td align="left">子元素距离左侧的距离</td></tr><tr><td align="center">bottom</td><td align="left">子元素距离底部的距离</td></tr><tr><td align="center">right</td><td align="left">子元素距离右部的距离</td></tr><tr><td align="center">child</td><td align="left">子组件</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">child: Stack(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Align(</span><br><span class="line">      alignment: Alignment(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">      child: Icon(Icons.home, size: <span class="number">40</span>, color: Colors.white),</span><br><span class="line">    ),</span><br><span class="line">    Positioned(</span><br><span class="line">      top: <span class="number">10.0</span>,</span><br><span class="line">      left: <span class="number">230.0</span>,</span><br><span class="line">      child: Icon(Icons.search, size: <span class="number">20</span>, color: Colors.white),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Expanded组件"><a href="#Flutter布局-Expanded组件" class="headerlink" title="Flutter布局-Expanded组件"></a>Flutter布局-Expanded组件</h1><blockquote><p>类似于web中的flex布局, Expanded组件中设置子元素宽度无效</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">flex</td><td align="left">元素占整个父元素的比例(不写按元素的比例自适应)</td></tr><tr><td align="center">child</td><td align="left">子元素</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRow</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Expanded(</span><br><span class="line">          child: IconContainer(Icons.home, Colors.black, <span class="number">32.0</span>),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">          flex: <span class="number">2</span>,</span><br><span class="line">          child: IconContainer(Icons.ac_unit, Colors.yellow, <span class="number">32.0</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-Padding Row Column Expanded组件</title>
      <link href="/2019/02/10/Flutter/paddingRowColumnExpanded/"/>
      <url>/2019/02/10/Flutter/paddingRowColumnExpanded/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-Padding组件"><a href="#Flutter布局-Padding组件" class="headerlink" title="Flutter布局-Padding组件"></a>Flutter布局-Padding组件</h1><blockquote><p>Flutter中很多Widget是没有padding属性的。这个时候我们可以用Padding组件处理容器和子元素之间的间距。</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">padding</td><td align="left">padding值，Edgelnsetss</td></tr><tr><td align="center">child</td><td align="left">子组件</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPadding</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Padding(</span><br><span class="line">      padding: EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>),</span><br><span class="line">      child: GridView.count(</span><br><span class="line">        crossAxisCount: <span class="number">2</span>,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Padding(</span><br><span class="line">            padding: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            child: Image.network(</span><br><span class="line">              <span class="string">"https://picsum.photos/seed/841/600/500"</span>,</span><br><span class="line">              fit: BoxFit.cover,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Padding(</span><br><span class="line">            padding: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            child: Image.network(</span><br><span class="line">              <span class="string">"https://picsum.photos/seed/841/600/500"</span>,</span><br><span class="line">              fit: BoxFit.cover,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Row水平布局组件"><a href="#Flutter布局-Row水平布局组件" class="headerlink" title="Flutter布局-Row水平布局组件"></a>Flutter布局-Row水平布局组件</h1><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">mainAxisAlignment</td><td align="left">主轴的排序方式</td></tr><tr><td align="center">crossAxisAlignment</td><td align="left">次轴的排序方式</td></tr><tr><td align="center">children</td><td align="left">组件子元素</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRow</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        IconContainer(Icons.home, Colors.black, <span class="number">32.0</span>),</span><br><span class="line">        IconContainer(Icons.save_alt, Colors.green, <span class="number">32.0</span>),</span><br><span class="line">        IconContainer(Icons.backup, Colors.yellow, <span class="number">32.0</span>),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Column垂直布局组件"><a href="#Flutter布局-Column垂直布局组件" class="headerlink" title="Flutter布局-Column垂直布局组件"></a>Flutter布局-Column垂直布局组件</h1><blockquote><p>Column和ListView的区别：ListView水平铺满一行</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">mainAxisAlignment</td><td align="left">主轴的排序方式</td></tr><tr><td align="center">crossAxisAlignment</td><td align="left">次轴的排序方式</td></tr><tr><td align="center">children</td><td align="left">组件子元素</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRow</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        IconContainer(Icons.home, Colors.black, <span class="number">32.0</span>),</span><br><span class="line">        IconContainer(Icons.save_alt, Colors.green, <span class="number">32.0</span>),</span><br><span class="line">        IconContainer(Icons.backup, Colors.yellow, <span class="number">32.0</span>),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-Expanded组件"><a href="#Flutter布局-Expanded组件" class="headerlink" title="Flutter布局-Expanded组件"></a>Flutter布局-Expanded组件</h1><blockquote><p>类似于web中的flex布局, Expanded组件中设置子元素宽度无效</p></blockquote><table><thead><tr><th align="center">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">flex</td><td align="left">元素占整个父元素的比例(不写按元素的比例自适应)</td></tr><tr><td align="center">child</td><td align="left">子元素</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRow</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Expanded(</span><br><span class="line">          child: IconContainer(Icons.home, Colors.black, <span class="number">32.0</span>),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">          flex: <span class="number">2</span>,</span><br><span class="line">          child: IconContainer(Icons.ac_unit, Colors.yellow, <span class="number">32.0</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-列表组件，图标组件，网格列表布局</title>
      <link href="/2019/01/18/Flutter/flutter_ListView/"/>
      <url>/2019/01/18/Flutter/flutter_ListView/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-列表组件-ListView"><a href="#Flutter布局-列表组件-ListView" class="headerlink" title="Flutter布局-列表组件-ListView"></a>Flutter布局-列表组件-ListView</h1><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>垂直列表</li><li>垂直图文列表</li><li>水平列表</li><li>动态列表</li><li>矩阵列表</li></ol><table><thead><tr><th align="center">名称</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">scrollDirection</td><td align="left">Axis</td><td align="left">Axis.horizontal水平列表<br>Axis.vertical垂直列表(默认)</td></tr><tr><td align="center">padding</td><td align="left">EdgeInsetsGeometry</td><td align="left">内边距</td></tr><tr><td align="center">reverse</td><td align="left">bool</td><td align="left">组件反向排序</td></tr><tr><td align="center">children</td><td align="left">List<widget></widget></td><td align="left">列表元素（可使用任意元素）</td></tr></tbody></table><blockquote><p>配合ListTile使用</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ListView(</span><br><span class="line">     scrollDirection: Axis.vertical,</span><br><span class="line">     padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">     <span class="comment">// reverse: true,</span></span><br><span class="line">     children: &lt;Widget&gt;[</span><br><span class="line">       ListTile(</span><br><span class="line">         leading: Icon(Icons.access_time),</span><br><span class="line">         title: Text(<span class="string">'title'</span>),</span><br><span class="line">         subtitle: Text(<span class="string">"subtitle"</span>),</span><br><span class="line">         trailing: Icon(Icons.add_circle_outline),</span><br><span class="line">       ),</span><br><span class="line">       ListTile(</span><br><span class="line">         title: Text(<span class="string">'title'</span>),</span><br><span class="line">         subtitle: Text(<span class="string">"subtitle"</span>),</span><br><span class="line">         trailing: Icon(Icons.add_circle_outline),</span><br><span class="line">       ),</span><br><span class="line">     ],</span><br><span class="line">   );</span><br></pre></td></tr></table></figure></div><blockquote><p>配合其他元素使用</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ListView(</span><br><span class="line">      scrollDirection: Axis.horizontal,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Image.asset(</span><br><span class="line">          <span class="string">'images/1.jpg'</span>,</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        Image.asset(</span><br><span class="line">          <span class="string">'images/1.jpg'</span>,</span><br><span class="line">        ),</span><br><span class="line">        Image.asset(</span><br><span class="line">          <span class="string">'images/1.jpg'</span>,</span><br><span class="line">        ),</span><br><span class="line">        Image.asset(</span><br><span class="line">          <span class="string">'images/1.jpg'</span>,</span><br><span class="line">        ),</span><br><span class="line">        Image.asset(</span><br><span class="line">          <span class="string">'images/1.jpg'</span>,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div><blockquote><p>循环渲染列表1</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义方法</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _getData() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      list.add(</span><br><span class="line">        ListTile(</span><br><span class="line">          title: Text(<span class="string">"我是<span class="subst">$i</span>个列表"</span>),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      scrollDirection: Axis.vertical,</span><br><span class="line">      children: _getData(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>循环渲染列表2</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义方法</span></span><br><span class="line"><span class="built_in">List</span>&lt;Widget&gt; _getData() &#123;</span><br><span class="line">  <span class="keyword">var</span> tempList = listData.map((val) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListTile(</span><br><span class="line">      leading: Image.network(</span><br><span class="line">        val[<span class="string">'images'</span>],</span><br><span class="line">        width: <span class="number">50</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">        fit: BoxFit.cover,</span><br><span class="line">      ),</span><br><span class="line">      title: Text(val[<span class="string">"title"</span>]),</span><br><span class="line">      subtitle: Text(val[<span class="string">"author"</span>]),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> tempList.toList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListView(</span><br><span class="line">    scrollDirection: Axis.vertical,</span><br><span class="line">    children: _getData(),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder"></a>ListView.builder</h2><blockquote><p>示例1</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImages</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  MyImages() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      list.add(</span><br><span class="line">        ListTile(</span><br><span class="line">          title: Text(<span class="string">"woshi <span class="subst">$i</span>"</span>),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: list.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> list[index];</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>示例2</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./data/listData.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImages</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: listData.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(</span><br><span class="line">          title: Text(listData[index][<span class="string">"title"</span>]),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Flutter布局-网格列表布局-GridView"><a href="#Flutter布局-网格列表布局-GridView" class="headerlink" title="Flutter布局-网格列表布局-GridView"></a>Flutter布局-网格列表布局-GridView</h1><ol><li>通过GridView.count 实现网格布局</li><li>通过GridView.builder 实现网格布局</li></ol><table><thead><tr><th align="center">名称</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">scrollDirection</td><td align="left">Axis</td><td align="left">滚动方法</td></tr><tr><td align="center">padding</td><td align="left">EdgeInsetsGeometry</td><td align="left">内边距</td></tr><tr><td align="center">reverse</td><td align="left">bool</td><td align="left">组件反向排序</td></tr><tr><td align="center">crossAxisSpacing</td><td align="left">double</td><td align="left">水平子Widget之间间距</td></tr><tr><td align="center">mainAxisSpacing</td><td align="left">double</td><td align="left">垂直子Widget之间间距</td></tr><tr><td align="center">crossAxisCount</td><td align="left">int</td><td align="left">一行的widget数量</td></tr><tr><td align="center">childAspectRatio</td><td align="left">double</td><td align="left">子Widget宽高比例 (宽度/高度的比例)</td></tr><tr><td align="center">children</td><td align="left"></td><td align="left">&lt;Widget&gt;[]</td></tr><tr><td align="center">gridDelegate</td><td align="left">SliverGridDelegateWithFixedCrossAxisCount<br>SliverGridDelegateWithMaxCrossAxisExtent</td><td align="left">控制布局主要用在GridView.bulder里面</td></tr></tbody></table><h2 id="GridView-count"><a href="#GridView-count" class="headerlink" title="GridView.count"></a>GridView.count</h2><blockquote><p>示例1</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGridView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _getListData() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      list.add(</span><br><span class="line">        Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">"这是一条数据<span class="subst">$i</span>"</span>,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.yellow,</span><br><span class="line">              fontSize: <span class="number">20</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.count(</span><br><span class="line">      crossAxisCount: <span class="number">2</span>, <span class="comment">//一行的widget 数量</span></span><br><span class="line">      crossAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">      mainAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      children: _getListData(),</span><br><span class="line">      childAspectRatio: <span class="number">2</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>示例2</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGridView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _getListData() &#123;</span><br><span class="line">    <span class="keyword">var</span> templateList = listData.map((value) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Image.network(value[<span class="string">"images"</span>]),</span><br><span class="line">            Text(value[<span class="string">"title"</span>])</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> templateList.toList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.count(</span><br><span class="line">      crossAxisCount: <span class="number">2</span>, <span class="comment">//一行的widget 数量</span></span><br><span class="line">      crossAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">      mainAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">      children: _getListData(),</span><br><span class="line">      <span class="comment">// childAspectRatio: 2,</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="GridView-builder"><a href="#GridView-builder" class="headerlink" title="GridView.builder"></a>GridView.builder</h2><blockquote><p>示例</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGridView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Widget _getListData(context, index) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Image.network(listData[index][<span class="string">"images"</span>]),</span><br><span class="line">          Text(listData[index][<span class="string">"title"</span>])</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.builder(</span><br><span class="line">      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount: <span class="number">2</span>,</span><br><span class="line">        mainAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">        crossAxisSpacing: <span class="number">10.0</span>,</span><br><span class="line">      ),</span><br><span class="line">      itemCount: listData.length,</span><br><span class="line">      itemBuilder: _getListData,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-图片组件</title>
      <link href="/2019/01/17/Flutter/flutter_image/"/>
      <url>/2019/01/17/Flutter/flutter_image/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-图片组件"><a href="#Flutter布局-图片组件" class="headerlink" title="Flutter布局-图片组件"></a>Flutter布局-图片组件</h1><table><thead><tr><th align="center">名称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">alignment</td><td align="left">topCenter:顶部居中对齐<br>topLeft:顶部左对齐<br>topRight:顶部右对齐<br>center:水平垂直居中对齐<br>centerLeft:垂直居中左对齐<br>centerRight:垂直居中右对齐<br>bottomCenter:底部居中对齐<br>bottomLeft:底部居左对齐<br>bottomRight:底部居右对齐</td></tr><tr><td align="center">color和colorBlendMode</td><td align="left">设置图片背景颜色通常和colorBlendMode配合使用，这样可以是图片颜色和背景颜色混合。</td></tr><tr><td align="center">fit</td><td align="left">fit属性用来控制图片的拉伸和挤压，这都是根据父容器来的。<br>BoxFit.fill:全图显示，图片会被拉伸，并充满父容器。<br>BoxFit.contain:全图显示，显示原比例，可能会有间隙<br>BoxFit.cover:显示可能拉伸，可能裁剪，充满（图片要从满整个容器，还不变形。）<br>BoxFit.fitWidth:宽度充满,显示可能拉伸，可能裁剪<br>BoxFit.fitHeight:高度充满,显示可能拉伸，可能裁剪<br>BoxFit.scaleDown:效果和contain差不多，但是此属性不允许显示超过源图片大小，可小不可大。</td></tr><tr><td align="center">repeat</td><td align="left">平铺 <br>ImageRepeat.repeat:横向纵向都进行重复铺满整个画布<br>ImageRepeat.repeatX:横向进行铺满整个画布</td></tr><tr><td align="center">width</td><td align="left">宽度  一般结合ClipOval才能看到效果</td></tr><tr><td align="center">height</td><td align="left">高度  一般结合ClipOval才能看到效果</td></tr></tbody></table><h2 id="远程图片-Image-network"><a href="#远程图片-Image-network" class="headerlink" title="远程图片 Image.network"></a>远程图片 Image.network</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">child: Image.network(</span><br><span class="line">        <span class="string">"https://avatars1.githubusercontent.com/u/27486511?s=460&amp;v=4"</span>,</span><br><span class="line">        fit: BoxFit.cover,</span><br><span class="line">        alignment: Alignment.bottomRight,</span><br><span class="line">      ),</span><br></pre></td></tr></table></figure></div><h2 id="圆角图片实现方式1"><a href="#圆角图片实现方式1" class="headerlink" title="圆角图片实现方式1"></a>圆角图片实现方式1</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">child: Container(</span><br><span class="line">        width: <span class="number">400.0</span>,</span><br><span class="line">        height: <span class="number">400.0</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">200</span>),</span><br><span class="line">          image: DecorationImage(</span><br><span class="line">              image: NetworkImage(</span><br><span class="line">                <span class="string">'https://avatars1.githubusercontent.com/u/27486511?s=460&amp;v=4'</span>,</span><br><span class="line">              ),</span><br><span class="line">              fit: BoxFit.cover),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br></pre></td></tr></table></figure></div><h2 id="圆角图片的实现方式2"><a href="#圆角图片的实现方式2" class="headerlink" title="圆角图片的实现方式2"></a>圆角图片的实现方式2</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">child: ClipOval(</span><br><span class="line">          child: Image.network(</span><br><span class="line">            <span class="string">"https://avatars1.githubusercontent.com/u/27486511?s=460&amp;v=4"</span>,</span><br><span class="line">            width: <span class="number">150.0</span>,</span><br><span class="line">            height: <span class="number">150.0</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br></pre></td></tr></table></figure></div><h1 id="本地图片-Image-asset"><a href="#本地图片-Image-asset" class="headerlink" title="本地图片 Image.asset"></a>本地图片 Image.asset</h1><blockquote><ol><li>再项目根目录新建img文件夹放入图片</li><li>修改pubspec.yam中的，将文件夹中的图片配置进去，然后才可以再项目中使用</li></ol></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line">  - images/a_dot_burr.jpeg</span><br><span class="line">  - images/a_dot_ham.jpeg</span><br><span class="line"></span><br><span class="line"># 或者直接配置图片文件夹也可以</span><br><span class="line"> assets:</span><br><span class="line">   - images/</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">        child: Image.asset(<span class="string">'images/1.jpg'</span>),</span><br><span class="line">      ),</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-Container组件，Text组件</title>
      <link href="/2019/01/16/Flutter/flutter_conterText/"/>
      <url>/2019/01/16/Flutter/flutter_conterText/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局-Container组件"><a href="#Flutter布局-Container组件" class="headerlink" title="Flutter布局-Container组件"></a>Flutter布局-Container组件</h1><table><thead><tr><th align="center">名称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">alignment</td><td align="left">topCenter:顶部居中对齐<br>topLeft:顶部左对齐<br>topRight:顶部右对齐<br>center:水平垂直居中对齐<br>centerLeft:垂直居中左对齐<br>centerRight:垂直居中右对齐<br>bottomCenter:底部居中对齐<br>bottomLeft:底部居左对齐<br>bottomRight:底部居右对齐</td></tr><tr><td align="center">decoration</td><td align="left">decoration:BoxDecoration(<br>color:Colors.blue,<br>border:Border.all(color:Colors.red,width:2.0,),<br>borderRadius:BorderRadius.all(Radius.circular(9.0)<br> )<br> )</td></tr><tr><td align="center">margin</td><td align="left">margin属性设置外边距 EdgeInsets.all(20.0)</td></tr><tr><td align="center">padding</td><td align="left">padding属性设置内边距指Container边缘与Child之间的距离</td></tr><tr><td align="center">transform</td><td align="left">让Container进行一些二旋转偏移</td></tr></tbody></table><h2 id="Container介绍"><a href="#Container介绍" class="headerlink" title="Container介绍"></a>Container介绍</h2><ul><li>Container:最常用的默认控件，类似于前端的div，但是实际上它是由多个内置控件组成的模版，只能包含一个child，支持 padding,margin,color,宽高,decoration（一般配置边框和阴影）等配置，在 Flutter 中，不是所有的控件都有 宽高、padding、margin、color 等属性，所以才会有 Padding、Center 等 Widget 的存在。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">child: Container(</span><br><span class="line">       width: <span class="number">200.0</span>,</span><br><span class="line">       height: <span class="number">300.0</span>,</span><br><span class="line">       transform: Matrix4.rotationZ(<span class="number">0.8</span>),</span><br><span class="line">       decoration: <span class="keyword">new</span> BoxDecoration(</span><br><span class="line">       <span class="comment">//弧度为10.0</span></span><br><span class="line">       borderRadius: BorderRadius.all(Radius.circular(<span class="number">10.0</span>)),</span><br><span class="line">       <span class="comment">//设置了decoration的color，就不能设置Container的color。</span></span><br><span class="line">       color: Colors.black,</span><br><span class="line">       <span class="comment">//边框</span></span><br><span class="line">       border: <span class="keyword">new</span> Border.all(color: Colors.blue, width: <span class="number">0.3</span>)),</span><br><span class="line">   child:<span class="keyword">new</span> Text(<span class="string">"xixi"</span>)</span><br></pre></td></tr></table></figure></div></li></ul><h1 id="Flutter布局-Text组件"><a href="#Flutter布局-Text组件" class="headerlink" title="Flutter布局-Text组件"></a>Flutter布局-Text组件</h1><table><thead><tr><th align="left">名称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">textAlign</td><td align="left">文本对齐方式(Center,left,right,justfy(两端对齐))</td></tr><tr><td align="left">textDirection</td><td align="left">文本方向(ltr:从左到右，rtl:从右到左)</td></tr><tr><td align="left">overflow</td><td align="left">文字超出屏幕之后的处理方式（clip裁剪,fade渐隐,ellipsis省略号）</td></tr><tr><td align="left">textScaleFactor</td><td align="left">字体显示倍率</td></tr><tr><td align="left">maxLines</td><td align="left">文字显示最大行数</td></tr><tr><td align="left">style</td><td align="left">字体的样式设置（TextStyle）</td></tr></tbody></table><blockquote><p>TextStyle的参数</p></blockquote><table><thead><tr><th align="left">名称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">decoration</td><td align="left">文字装饰线(none没有线，lineThrough删除线，overline上划线，underline下划线)</td></tr><tr><td align="left">decorationColor</td><td align="left">文字装饰线颜色</td></tr><tr><td align="left">decorationStyle</td><td align="left">文字装饰线风格([dashed,dotted]虚线，double两根线，solid一根实线，wavy波浪线)</td></tr><tr><td align="left">wordSpacing</td><td align="left">单词间隙（如果为负值，会让单词变得更紧凑）</td></tr><tr><td align="left">letterSpacing</td><td align="left">字母间隙（如果为负值，会让字母变得更紧凑）</td></tr><tr><td align="left">fontStyle</td><td align="left">文字样式（italic斜体，normal正常体）</td></tr><tr><td align="left">fontSize</td><td align="left">文字大小</td></tr><tr><td align="left">color</td><td align="left">文字颜色</td></tr><tr><td align="left">fontWeight</td><td align="left">文字粗细（bold粗体，normal正常体）</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">child: Text(</span><br><span class="line">    <span class="string">'文本文本文本22文本文本文本文本文本文本文本11111111'</span>,</span><br><span class="line">    textAlign: TextAlign.left,</span><br><span class="line">    overflow: TextOverflow.fade,</span><br><span class="line">    maxLines: <span class="number">1</span>,</span><br><span class="line">    style: TextStyle(</span><br><span class="line">      fontSize: <span class="number">20.0</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-布局</title>
      <link href="/2019/01/14/Flutter/flutter_layout1/"/>
      <url>/2019/01/14/Flutter/flutter_layout1/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter布局"><a href="#Flutter布局" class="headerlink" title="Flutter布局"></a>Flutter布局</h1><p>  Flutter 中拥有需要将近30种内置的 布局Widget，其中常用有 Container、Padding、Center、Flex、Stack、Row、Column、ListView 等，下面简单讲解它们的特性和使用。</p><table><thead><tr><th align="center">布局</th><th align="left">类型</th><th align="left">作用特点</th></tr></thead><tbody><tr><td align="center">容器</td><td align="left">Container</td><td align="left">只有一个子 Widget。默认充满，包含了padding、margin、color、宽高、decoration 等配置。</td></tr><tr><td align="center">可滚动</td><td align="left">GridView</td><td align="left">使用GridView将widget放置为二维列表。 GridView提供了两个预制list，或者您可以构建自定义网格。当GridView检测到其内容太长而不适合渲染框时，它会自动滚动</td></tr><tr><td align="center">居中</td><td align="left">Center</td><td align="left">只有一个子 Widget。只用于居中显示，常用于嵌套child，给child设置居中。</td></tr><tr><td align="center">层叠</td><td align="left">Stack</td><td align="left">可以有多个子 Widget。 子Widget堆叠在一起。</td></tr><tr><td align="center">线性</td><td align="left">Column</td><td align="left">可以有多个子 Widget。垂直布局。如果子widget超出屏幕范围，则会报溢出错误</td></tr><tr><td align="center">线性</td><td align="left">Row</td><td align="left">可以有多个子 Widget。水平布局。如果子widget超出屏幕范围，则会报溢出错误</td></tr><tr><td align="center">填充</td><td align="left">Expanded</td><td align="left">只有一个子 Widget。在 Column 和 Row 中充满。</td></tr><tr><td align="center">可滚动</td><td align="left">ListView</td><td align="left">是一个类似列的widget，它的内容对于其渲染框太长时会自动提供滚动。</td></tr><tr><td align="center">卡片</td><td align="left">Card</td><td align="left">接受单个子项，但该子项可以是Row，Column或其他包含子级列表的widget,显示圆角和阴影,Card内容不能滚动</td></tr><tr><td align="center">弹性</td><td align="left">Flex</td><td align="left">如H5中的弹性盒子布局，主要通过Flex和Expanded来配合实现</td></tr></tbody></table><h2 id="Container介绍"><a href="#Container介绍" class="headerlink" title="Container介绍"></a>Container介绍</h2><ul><li>Container:最常用的默认控件，但是实际上它是由多个内置控件组成的模版，只能包含一个child，支持 padding,margin,color,宽高,decoration（一般配置边框和阴影）等配置，在 Flutter 中，不是所有的控件都有 宽高、padding、margin、color 等属性，所以才会有 Padding、Center 等 Widget 的存在。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">new Container(</span><br><span class="line">    margin: EdgeInsets.all(20.0),</span><br><span class="line">    height: 120.0,</span><br><span class="line">    width: 500.0,</span><br><span class="line">    ///透明黑色遮罩</span><br><span class="line">    decoration: new BoxDecoration(</span><br><span class="line">        //弧度为10.0</span><br><span class="line">        borderRadius: BorderRadius.all(Radius.circular(10.0)),</span><br><span class="line">        //设置了decoration的color，就不能设置Container的color。</span><br><span class="line">        color: Colors.black,</span><br><span class="line">        //边框</span><br><span class="line">        border: new Border.all(color: Colors.blue, width: 0.3)),</span><br><span class="line">    child:new Text(<span class="string">"xixi"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="线性布局-Column、Row-介绍"><a href="#线性布局-Column、Row-介绍" class="headerlink" title="线性布局(Column、Row)介绍"></a>线性布局(Column、Row)介绍</h2><ul><li>Column、Row 所谓线性布局，即指沿水平或垂直方向排布子组件。它们常用的有这些属性配置：主轴方向是 start 或 center 等；副轴方向方向是 start 或 center 等；mainAxisSize 是充满最大尺寸，或者只根据子 Widget 显示最小尺寸。<br><strong>主轴和纵轴</strong><blockquote><p>对于线性布局，有主轴和纵轴之分，如果布局是沿水平方向，那么主轴就是指水平方向，而纵轴即垂直方向；如果布局沿垂直方向，那么主轴就是指垂直方向，而纵轴就是水平方向。在线性布局中，有两个定义对齐方式的枚举类MainAxisAlignment和CrossAxisAlignment，分别代表主轴对齐和纵轴对齐。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//主轴方向，Column的竖向、Row的横向</span><br><span class="line">mainAxisAlignment: MainAxisAlignment.start, </span><br><span class="line">//默认是最大充满、还是根据child显示最小大小</span><br><span class="line">mainAxisSize: MainAxisSize.max,</span><br><span class="line">//副轴方向，Column的横向、Row的竖向</span><br><span class="line">crossAxisAlignment :CrossAxisAlignment.center,</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="Row-布局"><a href="#Row-布局" class="headerlink" title="Row 布局"></a>Row 布局</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Column(</span><br><span class="line">        <span class="comment">//测试Row对齐方式，排除Column默认居中对齐的干扰</span></span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"start"</span>),</span><br><span class="line">              Text(<span class="string">"22222222"</span>)</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisSize: MainAxisSize.min,</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"min"</span>),</span><br><span class="line">              Text(<span class="string">"center"</span>)</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">            textDirection: TextDirection.rtl,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"11111111"</span>),</span><br><span class="line">              Text(<span class="string">"rtl"</span>)</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">         </span><br><span class="line">          Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">            verticalDirection: VerticalDirection.up,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"11111111"</span>,style: TextStyle(fontSize: <span class="number">30.0</span>),),</span><br><span class="line">              Text(<span class="string">"start"</span>)</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br></pre></td></tr></table></figure></div><p><strong>解释：</strong></p><ul><li>第一个Row很简单，默认为居中对齐；第二个Row，由于mainAxisSize值为MainAxisSize.min，Row的宽度等于两个Text的宽度和，所以对齐是无意义的，所以会从左往右显示；第三个Row设置textDirection值为TextDirection.rtl，所以子组件会从右向左的顺序排列，而此时MainAxisAlignment.end表示左对齐，所以最终显示结果就是图中第三行的样子；第四个Row测试的是纵轴的对齐方式，由于两个子Text字体不一样，所以其高度也不同，我们指定了verticalDirection值为VerticalDirection.up，即从低向顶排列，而此时crossAxisAlignment值为CrossAxisAlignment.start表示底对齐。</li></ul><h3 id="Column-布局"><a href="#Column-布局" class="headerlink" title="Column 布局"></a>Column 布局</h3><pre><code>Column可以在垂直方向排列其子组件。参数和Row一样，不同的是布局方向为垂直，主轴纵轴正好相反，读者可类比Row来理解，下面看一个例子：</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenterColumnRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">"hi"</span>),</span><br><span class="line">        Text(<span class="string">"world"</span>),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>解释</strong></p><blockquote><ol><li>由于我们没有指定Column的mainAxisSize，所以使用默认值MainAxisSize.max，则Column会在垂直方向占用尽可能多的空间，此例中为屏幕高度。</li><li>由于我们指定了 crossAxisAlignment 属性为CrossAxisAlignment.center，那么子项在Column纵轴方向（此时为水平方向）会居中对齐。注意，在水平方向对齐是有边界的，总宽度为Column占用空间的实际宽度，而实际的宽度取决于子项中宽度最大的Widget。在本例中，Column有两个子Widget，而显示“world”的Text宽度最大，所以Column的实际宽度则为Text(“world”) 的宽度，所以居中对齐后Text(“hi”)会显示在Text(“world”)的中间部分。</li></ol></blockquote><p><strong>实际上，Row和Column都只会在主轴方向占用尽可能大的空间，而纵轴的长度则取决于他们最大子元素的长度。</strong></p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><blockquote><p>如果Row里面嵌套Row，或者Column里面再嵌套Column，那么只有对最外面的Row或Column会占用尽可能大的空间，里面Row或Column所占用的空间为实际大小，下面以Column为例说明：</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  color: Colors.green,</span><br><span class="line">  child: Padding(</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    child: Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">      mainAxisSize: MainAxisSize.max, <span class="comment">//有效，外层Colum高度为整个屏幕</span></span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisSize: MainAxisSize.max,<span class="comment">//无效，内层Colum高度为实际高度  </span></span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">"hello world "</span>),</span><br><span class="line">              Text(<span class="string">"I am Jack "</span>),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><blockquote><p>如果要让里面的Column占满外部Column，可以使用Expanded 组件</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Expanded( </span><br><span class="line">  child: Container(</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    child: Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center, <span class="comment">//垂直方向居中对齐</span></span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">"hello world "</span>),</span><br><span class="line">        Text(<span class="string">"I am Jack "</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h2 id="弹性布局（Flex）"><a href="#弹性布局（Flex）" class="headerlink" title="弹性布局（Flex）"></a>弹性布局（Flex）</h2><h2 id="Expanded-介绍"><a href="#Expanded-介绍" class="headerlink" title="Expanded 介绍"></a>Expanded 介绍</h2><ul><li>Expanded 在 Column 和 Row 中代表着平均充满的作用，当有两个存在的时候默认均分充满。同时页可以设置 flex 属性决定比例。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">new Column(</span><br><span class="line">  ///主轴居中,即是竖直向居中</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">  ///大小按照最小显示</span><br><span class="line">  mainAxisSize : MainAxisSize.min,</span><br><span class="line">  ///横向也居中</span><br><span class="line">  crossAxisAlignment : CrossAxisAlignment.center,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    ///flex默认为1</span><br><span class="line">    new Expanded(child: new Text(<span class="string">"1111"</span>), flex: 2,),</span><br><span class="line">    new Expanded(child: new Text(<span class="string">"2222"</span>)),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-页面</title>
      <link href="/2019/01/10/Flutter/flutter_page1/"/>
      <url>/2019/01/10/Flutter/flutter_page1/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter页面"><a href="#Flutter页面" class="headerlink" title="Flutter页面"></a>Flutter页面</h2><p>  Flutter 中除了布局的 Widget，还有交互显示的 Widget 和完整页面呈现的Widget，其中常见的有 MaterialApp、Scaffold、Appbar、Text、Image、FlatButton等，下面简单介绍这些 Wdiget，并完成一个页面。</p><table><thead><tr><th align="center">类型</th><th align="left">作用特点</th></tr></thead><tbody><tr><td align="center">MaterialApp</td><td align="left">一般作为APP顶层的主页入口，可配置主题，多语言，路由等</td></tr><tr><td align="center">Scaffold</td><td align="left">一般用户页面的承载Widget，包含appbar、snackbar、drawer等material design的设定。</td></tr><tr><td align="center">Appbar</td><td align="left">一般用于Scaffold的appbar ，内有标题，二级页面返回按键等，当然不止这些，tabbar等也会需要它</td></tr><tr><td align="center">Text</td><td align="left">显示文本，几乎都会用到，主要是通过style设置TextStyle来设置字体样式等。</td></tr><tr><td align="center">RichText</td><td align="left">富文本，通过设置TextSpan，可以拼接出富文本场景。</td></tr><tr><td align="center">TextField</td><td align="left">文本输入框 ：new TextField(controller: //文本控制器, obscureText: “hint文本”);</td></tr><tr><td align="center">Image</td><td align="left">图片加载: new FadeInImage.assetNetwork( placeholder: “预览图”, fit: BoxFit.fitWidth, image: “url”);</td></tr><tr><td align="center">FlatButton</td><td align="left">按键点击: new FlatButton(onPressed: () {},child: new Container())；</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-Flutter介绍</title>
      <link href="/2018/06/06/Flutter/introduce/"/>
      <url>/2018/06/06/Flutter/introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|-- android  安卓资源文件</span><br><span class="line">|-- build    生产的编译目录</span><br><span class="line">|-- ios      ios资源文件</span><br><span class="line">|-- lib      flutter编写代码的文件，我们主要编写的代码就在这个文件夹</span><br><span class="line">|-- test     编写测试文件的目录</span><br><span class="line">|-- pubspec.yaml flutter依赖安装位置</span><br></pre></td></tr></table></figure></div><h1 id="Flutter入口文件，入口方法"><a href="#Flutter入口文件，入口方法" class="headerlink" title="Flutter入口文件，入口方法"></a>Flutter入口文件，入口方法</h1><p>  每个flutter项目的lib目录里面都有一个main.dart这个文件就是flutter的入口文件</p><p>main.dart 里面的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void main()&#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line">//简写</span><br><span class="line">void main()=&gt;runApp(MyApp());</span><br></pre></td></tr></table></figure></div><p>  其中main方法是dart 的入口方法。runApp方法是flutter的入口方法。MyApp是自定义的一个组件</p><h1 id="materialApp-和-Scaffold-两个组件装饰App"><a href="#materialApp-和-Scaffold-两个组件装饰App" class="headerlink" title="materialApp 和 Scaffold 两个组件装饰App"></a>materialApp 和 Scaffold 两个组件装饰App</h1><h2 id="materialApp"><a href="#materialApp" class="headerlink" title="materialApp"></a>materialApp</h2><blockquote><p>materialApp 是一个方便的Widget，他封装了应用程序实现Material Design 所需要的一些Widget。一般作为顶层widget使用</p></blockquote><table><thead><tr><th align="left">属性</th><th align="left">名称</th></tr></thead><tbody><tr><td align="left">home</td><td align="left">主页</td></tr><tr><td align="left">title</td><td align="left">标题</td></tr><tr><td align="left">color</td><td align="left">颜色</td></tr><tr><td align="left">theme</td><td align="left">主题</td></tr><tr><td align="left">routes</td><td align="left">路由</td></tr><tr><td align="left">## Scaffold</td><td align="left"></td></tr></tbody></table><blockquote><p>Scaffold 是 Material Design 布局结构的基本实现。此类提供了用于显示drawer、snackbar和底部sheet的API</p></blockquote><p>scaffold有下面几个主要属性<br>|属性|名称|<br>|:-|:-|<br>|appBar|显示在洁面顶部的一个AppBar|<br>|body|当前洁面所显示的主要内容Widget|<br>|drawer|抽屉菜单控件|</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-基础语法_Dart</title>
      <link href="/2018/05/22/Flutter/flutter_dart/"/>
      <url>/2018/05/22/Flutter/flutter_dart/</url>
      
        <content type="html"><![CDATA[<h1 id="Dart-数据类型"><a href="#Dart-数据类型" class="headerlink" title="Dart 数据类型"></a>Dart 数据类型</h1><h2 id="内置基础数据类型"><a href="#内置基础数据类型" class="headerlink" title="内置基础数据类型"></a>内置基础数据类型</h2><p><a href="https://img-blog.csdnimg.cn/20190323004151710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hcmN0aWNmb3guYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="image" class="fancybox"><img alt="image" data-src="https://img-blog.csdnimg.cn/20190323004151710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hcmN0aWNmb3guYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" class="lazyload" title="image"></a></p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><blockquote><p>Dart中定义变量有两种方式，一种是静态类型语言常用的方式，显式指定变量类型，另一种则是动态语言的常用方式，不指定类型，由vm自动推断。</p></blockquote><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过显式指定类型来定义变量</span></span><br><span class="line"><span class="built_in">String</span> name = <span class="string">"张三"</span>;</span><br><span class="line"><span class="built_in">num</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用关键字var，不指定类型</span></span><br><span class="line"><span class="keyword">var</span> address = <span class="string">"大道"</span>;</span><br><span class="line"><span class="keyword">var</span> id = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用var定义变量，即使未显式指定类型，一旦赋值后类型就被固定</span></span><br><span class="line"><span class="comment"> * 因此使用var定义的变量不能改变数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 以下代码错误，无法运行，number变量已确定为int类型</span></span><br><span class="line">number = <span class="string">"2020"</span>;</span><br></pre></td></tr></table></figure></div><blockquote><p>如想动态改变变量的数据类型，应当使用dynamic或Object来定义变量。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dynamic声明变量</span></span><br><span class="line"><span class="built_in">dynamic</span> var1 = <span class="string">"hello"</span>;</span><br><span class="line">var1 = <span class="number">19</span>;</span><br><span class="line"><span class="built_in">print</span>(var1);    <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object声明变量</span></span><br><span class="line"><span class="built_in">Object</span> var2 = <span class="number">20</span>;</span><br><span class="line">var2 = <span class="string">"ce"</span>;</span><br><span class="line"><span class="built_in">print</span>(var2);    <span class="comment">// ce</span></span><br></pre></td></tr></table></figure></div><h3 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h3><blockquote><p>Dart中定义常量也有两种方式，一种使用final关键字， 一个 final 变量只能赋值一次；另一种是使用const关键字定义。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用final关键字定义常量</span></span><br><span class="line"><span class="keyword">final</span> height = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用const关键字定义常量</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> time = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> time1 = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></div><blockquote><p>需要注意，final定义的常量是运行时常量，而const常量则是编译时常量，也就是说final定义常量时，其值可以是一个变量，而const定义的常量，其值必须是一个字面常量值</p></blockquote><h2 id="内置类型的常用操作"><a href="#内置类型的常用操作" class="headerlink" title="内置类型的常用操作"></a>内置类型的常用操作</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String 转 int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 转 double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int 转 String</span></span><br><span class="line"><span class="built_in">String</span> oneAsStr = <span class="number">1.</span>toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// double 转 String</span></span><br><span class="line"><span class="built_in">String</span> piAsStr = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>); <span class="comment">// 保留两位 '3.14'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断数字是不是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> as1=<span class="number">0</span>/<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(as1.isNaN)&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'是Nan'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'不是Nan'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.Dart可以使用单引号或双引号来创建字符串</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">'world'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Dart可以使用三引号来创建包含多行的字符串</span></span><br><span class="line"><span class="keyword">var</span> multiLine1 = <span class="string">"""你可以像这样，创建一个</span></span><br><span class="line"><span class="string">包含了多行的字符串内容</span></span><br><span class="line"><span class="string">"""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multiLine2 = <span class="string">'''你也可以使用三个单引号，创建一个</span></span><br><span class="line"><span class="string">包含了多行的字符串内容</span></span><br><span class="line"><span class="string">'''</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.还可以在字符串字面值的前面加上`r`来创建原始字符串，则该字符串中特殊字符可以不用转义</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">r'D:\workspace\code'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Dart支持使用"+"操作符拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">"hello"</span> + <span class="string">" world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.Dart提供了插值表达式"$&#123;&#125;"，也可以用于拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"王五"</span>;</span><br><span class="line"><span class="keyword">var</span> aStr = <span class="string">"hello,<span class="subst">$&#123;name&#125;</span>"</span>;</span><br><span class="line"><span class="built_in">print</span>(aStr);    <span class="comment">// hello,王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当仅取变量值时，可以省略花括号</span></span><br><span class="line"><span class="keyword">var</span> aStr2 = <span class="string">"hello,<span class="subst">$name</span>"</span>; <span class="comment">// hello,王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当拼接的是一个表达式时，则不能省略花括号</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"to"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"click <span class="subst">$&#123;str1.toUpperCase()&#125;</span>"</span>;</span><br><span class="line"><span class="built_in">print</span>(str2);   <span class="comment">// click TO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串类型判断是不是空字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(str.isEmpty)&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"为空"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"不为空"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><blockquote><p>Dart中的布尔类型仅有false、true两个值，不能使用0、非0或者null、非null来表达false和true。布尔类型的默认值为null</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> s;</span><br><span class="line"><span class="built_in">print</span>(s); <span class="comment">//null</span></span><br></pre></td></tr></table></figure></div><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><blockquote><p>Dart中列表操作与JavaScript中的数组相似。</p></blockquote><ul><li><p>常用的属性</p><table><thead><tr><th align="left">属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">长度</td></tr><tr><td align="left">isEmpty</td><td align="left">判断是否为空列表</td></tr><tr><td align="left">isNotEmpty</td><td align="left">判断不是为空列表</td></tr><tr><td align="left">reversed</td><td align="left">列表反转</td></tr></tbody></table></li><li><p>常用的方法</p></li></ul><table><thead><tr><th align="left">方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">add(“xxx”)</td><td align="left">添加一个</td></tr><tr><td align="left">addAll([‘xxx’,’xx’])</td><td align="left">添加多个</td></tr><tr><td align="left">indexOf(‘xxx’)</td><td align="left">从列表查找，找到返回列表的索引，找不到返回-1</td></tr><tr><td align="left">remove(‘xxx’)</td><td align="left">删除 传入具体值</td></tr><tr><td align="left">removeAt(index)</td><td align="left">删除 传入索引值</td></tr><tr><td align="left">fillRange(start，end,value)</td><td align="left">修改</td></tr><tr><td align="left">insert(index,value)</td><td align="left">指定位置插入</td></tr><tr><td align="left">insertAll(index,list)</td><td align="left">指定位置插入list</td></tr><tr><td align="left">toList()</td><td align="left">其他类型 转换为List</td></tr><tr><td align="left">join(‘x’)</td><td align="left">list 转换为字符串,以什么分割</td></tr><tr><td align="left">split(‘x’)</td><td align="left">字符串转list，以什么分割</td></tr><tr><td align="left">forEach</td><td align="left">循环</td></tr><tr><td align="left">map</td><td align="left">List的循环</td></tr><tr><td align="left">where</td><td align="left">满足条件的返回一个集合，不符合返回()</td></tr><tr><td align="left">any</td><td align="left">list中有一个满足条件的返回true否则返回false</td></tr><tr><td align="left">every</td><td align="left">list中全部满足条件的返回true否则返回false</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建列表</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 下标从0开始。使用length可以访问list的长度</span></span><br><span class="line"><span class="built_in">print</span>(list[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">print</span>(list.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用add添加元素</span></span><br><span class="line">list.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表去重</span></span><br><span class="line">list myList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.addAll(myList);</span><br><span class="line"><span class="keyword">var</span> setList = s.toList();</span><br><span class="line"><span class="built_in">print</span>(setList)<span class="comment">//输出去重后的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可在list字面量前添加const关键字，定义一个不可改变的 列表（编译时常量）</span></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">constantList[<span class="number">1</span>] = <span class="number">1</span>;     <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></div><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><blockquote><p>Dart中映射操作与JavaScript中的对象相似。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过字面量创建Map</span></span><br><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="string">'first'</span> : <span class="string">'partridge'</span>,</span><br><span class="line">  <span class="string">'second'</span>: <span class="string">'turtledoves'</span>,</span><br><span class="line">  <span class="string">'fifth'</span> : <span class="string">'golden rings'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用Map类的构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> pic = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">// 往Map中添加键值对</span></span><br><span class="line">pic[<span class="string">'first'</span>] = <span class="string">'partridge'</span>;</span><br><span class="line">pic[<span class="string">'second'</span>] = <span class="string">'turtledoves'</span>;</span><br><span class="line">pic[<span class="string">'fifth'</span>] = <span class="string">'golden rings'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.获取Map的长度</span></span><br><span class="line"><span class="built_in">print</span>(pic.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.查找Map</span></span><br><span class="line">pirnt(pic[<span class="string">"first"</span>]);</span><br><span class="line"><span class="built_in">print</span>(pic[<span class="string">"four"</span>]);    <span class="comment">// 键不存在则返回 null</span></span><br></pre></td></tr></table></figure></div><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>在Dart中，函数（或方法） 也是对象，它的类型是 Function。 这意味着，函数可以赋值给变量，也可以当做其他函数的参数。</p></blockquote><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="built_in">String</span> greet(<span class="built_in">String</span> name)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,<span class="subst">$name</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">greet(name)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,<span class="subst">$name</span>"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>要注意，函数也是对象，所有函数都有返回值。当没有指定返回值的时候，函数会返回null。当然，如果你强行使用void来修饰函数，则函数真的没有返回值</p></blockquote><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><blockquote><p>Dart中支持两种可选参数</p><ol><li>命名参数位置</li><li>参数位置不可变</li></ol></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，参数列表用花括号包裹</span></span><br><span class="line"><span class="comment">// 方式一命名参数位置</span></span><br><span class="line">add(&#123;<span class="built_in">int</span> x, <span class="built_in">int</span> y=<span class="number">1</span>, <span class="built_in">int</span> z=<span class="number">0</span>&#125;)&#123;</span><br><span class="line">    <span class="built_in">print</span>(x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">add(x:<span class="number">1</span>);              <span class="comment">// 2</span></span><br><span class="line">add(x:<span class="number">12</span>, y:<span class="number">2</span>, z:<span class="number">10</span>);   <span class="comment">// 24</span></span><br><span class="line"><span class="comment">//方式二 参数位置不可变</span></span><br><span class="line"><span class="comment">// 定义add函数 设置z的默认参数</span></span><br><span class="line"> add1(<span class="built_in">int</span> x, [<span class="built_in">int</span> y, <span class="built_in">int</span> z = <span class="number">2</span>]) &#123;</span><br><span class="line">    <span class="built_in">int</span> result = x + z;</span><br><span class="line">    <span class="keyword">if</span> (y != <span class="keyword">null</span>) &#123;</span><br><span class="line">      result = result + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  add1(<span class="number">0</span>); <span class="comment">// 2</span></span><br><span class="line">  add1(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// 4</span></span><br><span class="line">  add1(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></div><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = (x,y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">1</span>,<span class="number">12</span>));</span><br></pre></td></tr></table></figure></div><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><blockquote><p>与JavaScript 的相同</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add2(<span class="built_in">num</span> x, <span class="built_in">num</span> y) =&gt; x + y;</span><br></pre></td></tr></table></figure></div><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><pre><code>+、-、*、/、% ~/</code></pre><blockquote><p>和其他语言一样 多一个 ~/  作用相除后的结果取整返回</p></blockquote><h3 id="类型判定运算符"><a href="#类型判定运算符" class="headerlink" title="类型判定运算符"></a>类型判定运算符</h3><table><thead><tr><th align="left">操作符</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">as</td><td align="left">类型转换</td></tr><tr><td align="left">is</td><td align="left">数据类型判断</td></tr><tr><td align="left">is!</td><td align="left">数据类型判断取反</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (emp <span class="keyword">is</span> Person) &#123; <span class="comment">// Type check</span></span><br><span class="line">  emp.firstName = <span class="string">'Bob'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面代码可简化为</span></span><br><span class="line">(emp <span class="keyword">as</span> Person).firstName = <span class="string">'Bob'</span>;</span><br></pre></td></tr></table></figure></div><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 a 变量赋值</span></span><br><span class="line">a = value;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合赋值操作符</span></span><br><span class="line">a += b;  <span class="comment">// 等价于a = a + b;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 b 是 null，则赋值给 b；</span></span><br><span class="line"><span class="comment">// 如果不是 null，则 b 的值保持不变</span></span><br><span class="line">b ??= value; </span><br><span class="line">     </span><br><span class="line"><span class="comment">// 如下所示:     </span></span><br><span class="line">  <span class="keyword">var</span> s;</span><br><span class="line">  <span class="built_in">print</span>(s);  <span class="comment">// null</span></span><br><span class="line">  <span class="built_in">print</span>(s ?? <span class="string">'str'</span>);  <span class="comment">// str</span></span><br><span class="line">  s ??= <span class="string">'string'</span>;</span><br><span class="line">  <span class="built_in">print</span>(s);  <span class="comment">// string</span></span><br></pre></td></tr></table></figure></div><h3 id="级联操作符"><a href="#级联操作符" class="headerlink" title="级联操作符"></a>级联操作符</h3><blockquote><p>假如类Person有三个方法，setName、setAge、getName则可如下调用</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Person()..setName(<span class="string">"Bob"</span>)..setAge(<span class="number">20</span>)..getName();</span><br></pre></td></tr></table></figure></div><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><blockquote><p>支持 for in 、forEach 用法和JavaScript 相同</p></blockquote><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">  Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Dart中没有private、public这些成员访问修饰符。如果是类私有的成员，不希望外面访问，只需要在成员变量之前加上一个下划线_变为私有即可</p></blockquote><h2 id="Getters-和-Setters方法"><a href="#Getters-和-Setters方法" class="headerlink" title="Getters 和 Setters方法"></a>Getters 和 Setters方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> userName;</span><br><span class="line"></span><br><span class="line">    Person(<span class="keyword">this</span>.userName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名前加get关键字</span></span><br><span class="line">    <span class="built_in">String</span> <span class="keyword">get</span> name&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"user:"</span>  +  <span class="keyword">this</span>.userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名前加set关键字</span></span><br><span class="line">    <span class="keyword">set</span> name(<span class="built_in">String</span> name)&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">this</span>.userName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>  main() &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="built_in">print</span>(p.name);   <span class="comment">// user:zhangsan</span></span><br><span class="line">    p.name = <span class="string">"lisi"</span>;</span><br><span class="line">    <span class="built_in">print</span>(p.name);   <span class="comment">// user:lisi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="类的继承-关键字（extends）"><a href="#类的继承-关键字（extends）" class="headerlink" title="类的继承 关键字（extends）"></a>类的继承 关键字（extends）</h2><blockquote><p>Dart中的继承可以使用关键字extends继承父类，使用关键字super引用父类</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    myFunction()&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    myFunction()&#123;</span><br><span class="line">        <span class="keyword">super</span>.myFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="类的多继承-关键字-with"><a href="#类的多继承-关键字-with" class="headerlink" title="类的多继承  关键字(with)"></a>类的多继承  关键字(with)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 首先定义三个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father1</span> </span>&#123;</span><br><span class="line">    a()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"this is a func"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Father()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Father1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father2</span> </span>&#123;</span><br><span class="line">    b()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"this is b func"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Father()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Father2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father3</span> </span>&#123;</span><br><span class="line">    c()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"this is c func"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Father()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Father3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>  <span class="title">with</span> <span class="title">Father1</span> <span class="title">Father2</span>,<span class="title">Father3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> Son();</span><br><span class="line">  obj.Father(); <span class="comment">//Father3</span></span><br><span class="line">  obj.a();      <span class="comment">//this is a func</span></span><br><span class="line">  obj.b();      <span class="comment">//this is b func</span></span><br><span class="line">  obj.c();      <span class="comment">//this is c func</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="接口抽象"><a href="#接口抽象" class="headerlink" title="接口抽象"></a>接口抽象</h2><h3 id="抽象类-关键字-abstract"><a href="#抽象类-关键字-abstract" class="headerlink" title="抽象类 关键字(abstract)"></a>抽象类 关键字(abstract)</h3><blockquote><p>抽象类是不能被实例化的，子类继承抽象类时，必须实现全部抽象方法。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBase</span> </span>&#123;</span><br><span class="line">    func1();</span><br><span class="line">    func2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="隐式接口-关键字-implements"><a href="#隐式接口-关键字-implements" class="headerlink" title="隐式接口 关键字(implements)"></a>隐式接口 关键字(implements)</h3><blockquote><p>实际上在Dart中，每个类都隐式的定义了一个包含所有实例成员的接口， 并且该类实现了这个接口。<br>如果我们想实现某个接口，但有又不想继承，则可以使用这种隐式接口机制。我们需要用到关键字implements</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> greet()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">People</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> greet()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hi,I'm wangwu."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(People p)&#123;</span><br><span class="line">  p.greet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  greet(<span class="keyword">new</span> Student());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型</span></span><br><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">names.add(<span class="string">"zhangsan"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maps = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">maps[<span class="number">1</span>]=<span class="string">"lisi"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量写法</span></span><br><span class="line"><span class="keyword">var</span> infos = &lt;<span class="built_in">String</span>&gt;[<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="string">'wangwu'</span>];</span><br></pre></td></tr></table></figure></div><h1 id="库的使用"><a href="#库的使用" class="headerlink" title="库的使用"></a>库的使用</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 指定dart:前缀，表示导入标准库，如dart:io</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用相对路径或绝对路径来引用dart文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'lib/student/student.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定package:前缀，表示导入包管理系统中的库</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:utils/utils.dart'</span>;</span><br></pre></td></tr></table></figure></div><blockquote><p>导入库时，可以使用as关键字来给库起别名，避免命名空间冲突。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:lib1/lib1.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:lib2/lib2.dart'</span> <span class="keyword">as</span> lib2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lib1中的Element</span></span><br><span class="line"><span class="built_in">Element</span> element1 = <span class="keyword">new</span> <span class="built_in">Element</span>();</span><br><span class="line"><span class="comment">// 使用lib2中的Element</span></span><br><span class="line">lib2.<span class="built_in">Element</span> element2 = <span class="keyword">new</span> lib2.<span class="built_in">Element</span>();</span><br></pre></td></tr></table></figure></div><blockquote><p>使用show和hide关键字控制库中成员的可见性</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅导入foo，屏蔽库中其他成员</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:lib1/lib1.dart'</span> <span class="keyword">show</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏蔽foo，库中其他成员都可见</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:lib2/lib2.dart'</span> <span class="keyword">hide</span> foo;</span><br></pre></td></tr></table></figure></div><blockquote><p>为了减少 APP 的启动时间，加载很少使用的功能，我们还可以延迟导入库。使用 deferred as关键字延迟导入</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:deferred/hello.dart'</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当需要使用时，再通过库标识符调用 loadLibrary函数加载</span></span><br><span class="line">hello.loadLibrary();</span><br></pre></td></tr></table></figure></div><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><blockquote><p>使用 async 和 await关键字</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入io库，调用sleep函数</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟耗时操作，调用sleep函数睡眠2秒</span></span><br><span class="line">doTask() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds:<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'xx'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数用于包装</span></span><br><span class="line">test() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="keyword">await</span> doTask();</span><br><span class="line">  <span class="built_in">print</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"main start"</span>);</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"main end"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main start</span></span><br><span class="line">  <span class="comment">// main end</span></span><br><span class="line">  <span class="comment">// xx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Flutter到原生开发-环境搭建</title>
      <link href="/2018/05/21/Flutter/EnvironmentSetUp/"/>
      <url>/2018/05/21/Flutter/EnvironmentSetUp/</url>
      
        <content type="html"><![CDATA[<h2 id="再windows上搭建Flutter开发环境"><a href="#再windows上搭建Flutter开发环境" class="headerlink" title="再windows上搭建Flutter开发环境"></a>再windows上搭建Flutter开发环境</h2><p>  由于Flutter会同时构建Android和IOS两个平台的发布包，所以Flutter同时依赖Android SDK和iOS SDK，在安装Flutter时也需要安装相应平台的构建工具和SDK。下面我们分别介绍一下Windows和macOS下的环境搭建。</p><blockquote><p>注意：本节介绍的安装方式随着Flutter的升级可能会发生变化，如果下面介绍的内容在您安装Flutter时已经失效，请访问Flutter官网，按照官网最新的安装教程安装。</p></blockquote><h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><p>  由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，可以将如下环境变量加入到用户环境变量中：<br>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></div></p><p>  windows：控制面板\所有控制面板项\系统&gt;高级&gt;环境变量&gt;新建</p><h3 id="获取Flutter-SDK"><a href="#获取Flutter-SDK" class="headerlink" title="获取Flutter SDK"></a>获取Flutter SDK</h3><ul><li>去flutter官网下载其最新可用的安装包，下载地址：<a href="https://flutter.dev/docs/development/tools/sdk/releases" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases</a> </li><li>在中国大陆地区，要想正常获取安装包列表或下载安装包，可能需要翻墙，读者也可以去Flutter github项目下去下载安装包，地址：<a href="https://github.com/flutter/flutter/releases" target="_blank" rel="noopener">https://github.com/flutter/flutter/releases</a> 。<blockquote><p>将安装包zip解压到你想安装Flutter SDK的路径（如：C:\src\flutter；注意，不要将flutter安装到需要一些高权限的路径如C:\Program Files\）。<br>在Flutter安装目录的flutter文件下找到flutter_console.bat，双击运行并启动flutter命令行，接下来，你就可以在Flutter命令行运行flutter命令了。</p></blockquote></li></ul><h3 id="更新环境变量"><a href="#更新环境变量" class="headerlink" title="更新环境变量"></a>更新环境变量</h3><ul><li><p>如果你想在Windows系统自带命令行运行flutter命令，需要添加以下环境变量到用户PATH：</p><blockquote><p>windows：控制面板\所有控制面板项\系统&gt;高级&gt;用户环境变量(path中添加  flutter\bin的全路径)</p></blockquote><p><strong>运行 flutter doctor命令</strong></p><ul><li>在Flutter命令行运行如下命令来查看是否还需要安装其它依赖，如果需要，安装它们：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><h3 id="Android设置"><a href="#Android设置" class="headerlink" title="Android设置"></a>Android设置</h3><pre><code>Flutter依赖于Android Studio的全量安装。Android Studio不仅可以管理Android 平台依赖、SDK版本等，而且它也是Flutter开发推荐的IDE之一（当然，你也可以使用其它编辑器或IDE，我们将会在后面讨论）。</code></pre><p>  <strong>安装Android Studio</strong></p><ol><li>安装Android Studio 下载地址：<a href="https://developer.android.google.cn/studio/" target="_blank" rel="noopener">https://developer.android.google.cn/studio/</a></li><li>启动Android Studio，然后执行“Android Studio安装向导”。这将安装最新的Android SDK、Android SDK平台工具和Android SDK构建工具，这些是用Flutter进行Android开发所需要的。</li></ol><p>  <strong>安装遇到问题？</strong><br>    如果在安装过程中遇到问题，可以先去flutter官网查看一下安装方式是否发生变化，或者在网上搜索一下解决方案。</p><h2 id="再macOS上搭建Flutter开发环境"><a href="#再macOS上搭建Flutter开发环境" class="headerlink" title="再macOS上搭建Flutter开发环境"></a>再macOS上搭建Flutter开发环境</h2><pre><code>在masOS下可以同时进行Android和iOS设备的测试。</code></pre><h3 id="获取Flutter-SDK-1"><a href="#获取Flutter-SDK-1" class="headerlink" title="获取Flutter SDK"></a>获取Flutter SDK</h3><ol><li><p>去flutter官网下载其最新可用的安装包，下载地址：<a href="https://flutter.io/sdk-archive/#macos" target="_blank" rel="noopener">https://flutter.io/sdk-archive/#macos</a></p><blockquote><p>在中国大陆地区，要想正常获取安装包列表或下载安装包，可能需要翻墙，读者也可以去Flutter github项目下去下载安装包，地址：<a href="https://github.com/flutter/flutter/releases" target="_blank" rel="noopener">https://github.com/flutter/flutter/releases</a> 。</p></blockquote></li><li><p>解压安装包到你想安装的目录，如：</p><blockquote><p>cd ~/development<br>unzip ~/Downloads/flutter_macos_v0.5.1-beta.zip</p></blockquote></li><li><p>添加flutter相关工具到path中：</p><blockquote><p>export PATH=<code>pwd</code>/flutter/bin:$PATH<br>此代码只能暂时针对当前命令行窗口设置PATH环境变量  </p></blockquote><p><strong>运行 flutter doctor命令</strong><br>参照window步骤</p><h3 id="更新环境变量-1"><a href="#更新环境变量-1" class="headerlink" title="更新环境变量"></a>更新环境变量</h3><blockquote><p>将Flutter添加到PATH中，可以在任何终端会话中运行flutter命令。<br>对于所有终端会话永久修改此变量的步骤是和特定计算机系统相关的。<br>通常，您会在打开新窗口时将设置环境变量的命令添加到执行的文件中。例如</p></blockquote></li><li><p>确定您Flutter SDK的目录记为“FLUTTER_INSTALL_PATH”，您将在步骤3中用到。</p></li><li><p>打开(或创建) $HOME/.bash_profile。文件路径和文件名可能在你的电脑上不同.</p></li><li><p>添加以下路径:</p><blockquote><p>export PATH=[FLUTTER_INSTALL_PATH]/flutter/bin:$PATH<br>例如笔者Flutter 安装目录是”~/code/flutter_dir”，那么代码为<br>export PATH=~/code/flutter_dir/flutter/bin:$PATH</p></blockquote></li><li><p>运行 source $HOME/.bash_profile 刷新当前终端窗口。</p><blockquote><p>注意: 如果你使用终端是zsh，终端启动时 ~/.bash_profile 将不会被加载，解决办法就是修改 ～/.zshrc ，在其中添加：source ～/.bash_profile</p></blockquote></li><li><p>验证“flutter/bin”是否已在PATH中：</p><blockquote><p>echo $PATH</p></blockquote></li></ol><h3 id="安装-Xcode"><a href="#安装-Xcode" class="headerlink" title="安装 Xcode"></a>安装 Xcode</h3><pre><code>要为iOS开发Flutter应用程序，您需要Xcode 9.0或更高版本:</code></pre><ol><li>安装Xcode 9.0或更新版本(通过<a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">链接下载</a>或苹果应用商店).</li><li>配置Xcode命令行工具以使用新安装的Xcode版本 sudo xcode-select –switch /Applications/Xcode.app/Contents/Developer 对于大多数情况，当您想要使用最新版本的Xcode时，这是正确的路径。如果您需要使用不同的版本，请指定相应路径。</li><li>确保Xcode许可协议是通过打开一次Xcode或通过命令sudo xcodebuild -license同意过了.<br><em>使用Xcode，您可以在iOS设备或模拟器上运行Flutter应用程序</em><h3 id="安装-Xcode-1"><a href="#安装-Xcode-1" class="headerlink" title="安装 Xcode"></a>安装 Xcode</h3>和Window一样，要在Android设备上构建并运行Flutter程序都需要先安装Android Studio，读者可以先自行下载并安装Android Studio，在此不再赘述。</li></ol><h3 id="升级-Flutter"><a href="#升级-Flutter" class="headerlink" title="升级 Flutter"></a>升级 Flutter</h3><h4 id="Flutter-SDK分支"><a href="#Flutter-SDK分支" class="headerlink" title="Flutter SDK分支"></a>Flutter SDK分支</h4><pre><code>Flutter SDK有多个分支，如beta、dev、master、stable，其中stable分支为稳定分支（日后有新的稳定版本发布后可能也会有新的稳定分支，如1.0.0），dev和master为开发分支，安装flutter后，你可以运行flutter channel查看所有分支，如笔者本地运行后，结果如下：</code></pre><blockquote><p>Flutter channels:<br>beta<br>dev<br>*master</p></blockquote><pre><code>带&quot;*&quot;号的分支即你本地的Flutter SDK 跟踪的分支，要切换分支，可以使用flutter channel beta 或 flutter channel master，Flutter官方建议跟踪稳定分支，但你也可以跟踪master分支，这样可以查看最新的变化，但这样稳定性要低的多。</code></pre><h4 id="升级Flutter-SDK和依赖包"><a href="#升级Flutter-SDK和依赖包" class="headerlink" title="升级Flutter SDK和依赖包"></a>升级Flutter SDK和依赖包</h4><pre><code>要升级flutter sdk，只需一句命令：</code></pre>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter upgrade</span><br></pre></td></tr></table></figure></div><p>  该命令会同时更新Flutter SDK和你的flutter项目依赖包。如果你只想更新项目依赖包（不包括Flutter SDK），可以使用如下命令：</p><ul><li>flutter packages get获取项目所有的依赖包。</li><li>flutter packages upgrade 获取项目所有依赖包的最新版本。<h4 id="Android-Studio-配置与使用"><a href="#Android-Studio-配置与使用" class="headerlink" title="Android Studio 配置与使用"></a>Android Studio 配置与使用</h4>由于Android Studio是基于IntelliJ IDEA开发的，所以读者也可以使用IntelliJ IDEA。<h5 id="安装Flutter和Dart插件"><a href="#安装Flutter和Dart插件" class="headerlink" title="安装Flutter和Dart插件"></a>安装Flutter和Dart插件</h5>需要安装两个插件:<ul><li>Flutter插件： 支持Flutter开发工作流 (运行、调试、热重载等)。</li><li>Dart插件： 提供代码分析 (输入代码时进行验证、代码补全等)。</li></ul><strong>安装步骤：</strong><ol><li>启动Android Studio。</li><li>打开插件首选项 (macOS：Preferences&gt;Plugins, Windows：File&gt;Settings&gt;Plugins)。</li><li>选择 Browse repositories…，选择 flutter 插件并点击 install。</li><li>重启Android Studio后插件生效。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs之koa2的常用中间件</title>
      <link href="/2018/03/15/node/node_koa/"/>
      <url>/2018/03/15/node/node_koa/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的koa中间件"><a href="#常用的koa中间件" class="headerlink" title="常用的koa中间件"></a>常用的koa中间件</h1><table><thead><tr><th align="left">名称</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">koa-bodyparser</td><td align="left">把post请求的参数解析到ctx.request.body中</td></tr><tr><td align="left">koa-router</td><td align="left">使用koa-router自动判断请求的方法和请求的路径，免去了手动判断的代码</td></tr><tr><td align="left">koa-static</td><td align="left">用于加载静态资源的中间件，通过他何以为页面请求加载css，js等静态资源</td></tr><tr><td align="left">koa-views</td><td align="left">用于加载html模板文件（例如使用ejs，pub,koa-nunjucks-2,swig,handlebars,模板）</td></tr><tr><td align="left">koa-onerror</td><td align="left">koa的错误处理，当发生错误，可以通过error事件，对错误统一处理</td></tr><tr><td align="left">koa-logger</td><td align="left">日志等级分类，同时也能替代console.log输出。另外它可以按照文件大小或者日期来生成本地日志文件，还可以使用邮件等形式发送日志</td></tr><tr><td align="left">koa-json</td><td align="left">美观的输出JSON response的Koa中间件有两种使用方式：一种是总是返回美化了的json数据</td></tr><tr><td align="left">koa-jwt</td><td align="left">作用是控制哪些路由需要jwt验证，哪些接口不需要验证</td></tr><tr><td align="left">jsonwebtoken</td><td align="left">实现token的生成，校验和解码</td></tr><tr><td align="left">crypto-js</td><td align="left">密码加密解密使用工具</td></tr><tr><td align="left">crypto</td><td align="left">nodejs 自带的加密模块 加密解密使用工具</td></tr><tr><td align="left">nodemon</td><td align="left">node文件修改后热加载工具，就可以看到改动后的内容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端爬虫神器-puppeteer</title>
      <link href="/2018/02/13/node/Puppeteer/"/>
      <url>/2018/02/13/node/Puppeteer/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>Puppeteer 翻译是操纵木偶的人，利用这个工具，我们能做一个操纵页面的人.Puppeteer是一个Nodejs的库，支持调用Chrome的API来操纵Web.</p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>利用网页生成PDF、图片</li><li>爬取SPA应用，并生成预渲染内容（即“SSR” 服务端渲染）</li><li>可以从网站抓取内容</li><li>自动化表单提交、UI测试、键盘输入等</li><li>帮你创建一个最新的自动化测试环境（chrome），可以直接在此运行测试用例</li><li>捕获站点的时间线，以便追踪你的网站，帮助分析网站性能问题</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i puppeteer</span><br><span class="line">or &quot;yarn add puppeteer&quot;</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">方法名称</th><th align="left">方法说明</th><th align="left">特殊情况</th></tr></thead><tbody><tr><td align="left">browser.newPage()</td><td align="left">创建一个 Page 实例</td><td align="left"></td></tr><tr><td align="left">browser.close()</td><td align="left">关闭浏览器</td><td align="left">注意catch住异常关闭，避免浏览器进程没有关闭掉，耗费系统资源</td></tr><tr><td align="left">browser.pages()</td><td align="left">获取所有打开的 Page 实例</td><td align="left">打开多个tab页处理时切换page特别有用</td></tr><tr><td align="left">puppeteer.launch</td><td align="left">启动浏览器</td><td align="left">调试时推荐slowMo，headless，devtools 这三个参数</td></tr><tr><td align="left">page.goto(url)</td><td align="left">打开指定网站</td><td align="left">注意使用它的waitUntil参数，默认是load，有时会超时</td></tr><tr><td align="left">page.screenshot</td><td align="left">把当前页面截图</td><td align="left">不但可以截图也可以截取元素的图片</td></tr><tr><td align="left">Page.$(selector)</td><td align="left">获取单个元素，底层是调用的是 document.querySelector()</td><td align="left"></td></tr><tr><td align="left">Page.$$(selector)</td><td align="left">获取一组元素，底层调用的是 document.querySelectorAll()</td><td align="left">注意返回的参数经过Array.form了，可能有些参数不能够使用</td></tr><tr><td align="left">Page.$eval()</td><td align="left">此方法在页面内执行 document.querySelector，然后把匹配到的元素作为第一个参数传给 pageFunction</td><td align="left">是在在浏览器实例上下文中要执行的方法</td></tr><tr><td align="left">page.$$eval(selector, pageFunction[, …args])</td><td align="left">此方法在页面内执行 Array.from(document.querySelectorAll(selector))，然后把匹配到的元素数组作为第一个参数传给 pageFunction</td><td align="left"></td></tr><tr><td align="left">page.click()</td><td align="left">点击一个元素</td><td align="left"></td></tr><tr><td align="left">Page.emulate</td><td align="left">修改模拟器(客户端)运行配置，模拟设备，参数设备对象，比如 iPhone, Mac, Android 等</td><td align="left"></td></tr><tr><td align="left">page.select(‘#dname’, “77”)</td><td align="left">select选择器第一个参数是元素，第二个元素是options的value值</td><td align="left"></td></tr><tr><td align="left">page.waitFor</td><td align="left">等待sleep</td><td align="left"></td></tr><tr><td align="left">page.waitForFunction(pageFunction[, options[, …args]])</td><td align="left">等待 pageFunction 执行完成之后</td><td align="left"></td></tr><tr><td align="left">page.waitForNavigation(options)</td><td align="left">等待页面基本元素加载完之后，比如同步的 HTML, CSS, JS 等代码</td><td align="left"></td></tr><tr><td align="left">page.waitForSelector(selector[, options])</td><td align="left">css语法，等待某个选择器的元素加载之后，这个元素可以是异步加载的</td><td align="left"></td></tr><tr><td align="left">page.waitForXPath(xpath[, options])</td><td align="left">xpath语法，等待某个选择器的元素加载之后，这个元素可以是异步加载的</td><td align="left"></td></tr><tr><td align="left">page.evaluate(pageFunction, …args)</td><td align="left">返回一个可序列化的普通对象，pageFunction 表示要在页面执行的函数， args 表示传入给 pageFunction 的参数， 下面的 pageFunction 和 args 表示同样的意思。</td><td align="left">注意是在浏览器页面执行</td></tr><tr><td align="left">Page.evaluateHandle(pageFunction, …args)</td><td align="left">在 Page 上下文执行一个 pageFunction, 返回 JSHandle 实体</td><td align="left">Page 上下文执行</td></tr><tr><td align="left">page.evaluateOnNewDocument(pageFunction, …args),</td><td align="left">在文档页面载入前调用 pageFunction, 如果页面中有 iframe 或者 frame, 则函数调用 的上下文环境将变成子页面的，即iframe 或者 frame, 由于是在页面加载前调用，这个函数一般是用来初始化 javascript 环境的，比如重置或者 初始化一些全局变量</td><td align="left"></td></tr><tr><td align="left">Page.exposeFunction</td><td align="left">此方法添加一个命名为 name 的方法到页面的 window 对象 当调用 name 方法时，在 node.js 中执行 puppeteerFunction，并且返回 Promise 对象，解析后返回 puppeteerFunction 的返回值</td><td align="left">使用时会变成全局的，也可以引用你的类库</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/01/20/hello-world/"/>
      <url>/2018/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
